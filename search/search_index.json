{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation steps \u00b6 This is intended for and has been tested on Ubuntu 24.04 noble numbat. Important Paste the code copied from this guide in the terminal using Ctrl \uff0b Shift \uff0b V . Important Do everything below in order, otherwise things will break. Important Do NOT run the commands twice. Some will not produce undesired effects, but others will create problems. Todo Put all scripts into shell files and include them via mkdocs snippet. Inlcude the following for all to ensure they fail fast: # disabled -u for unset variables due to weird behavior set -ex -o pipefail Grub \u00b6 Warning Perform only if you gave problems booting due to graphics drivers. This is useful to prevent graphic driver issues, since the OS makes assumptions and changes to video resolution before loading the GUI. This basically removes quiet and splash while adding nomodeset . The only downside is cosmetic, i.e. no splash screen and verbose output. sudo sed -i \\ 's~GRUB_CMDLINE_LINUX_DEFAULT=.*~GRUB_CMDLINE_LINUX_DEFAULT=\"nomodeset\"~' \\ /etc/default/grub sudo update-grub Swap \u00b6 Info Nothing to do here yet, only pending research. Reference articles: Part 1 Part 2 Apt Packages - tools and prerequisites \u00b6 Follow the guide . Set up Keyring for subsequent apt packages \u00b6 Warning You MUST do this before continuing, otherwise scripts are likely to fail. To ensure keyring dir is created and has the right permissions: KEYRING_DIR = /etc/apt/keyrings sudo install -m 0755 -d ${ KEYRING_DIR } All the keyring-using apt installations are updated to respect the deprecation of the insecure keyring management methods apt-key add , apt-key adv , and apt-add-repository . This is a painful departure from a simple process to understanding the new system, which is both more secure and more complex to use. A comprehensive article on the topic can be found here: https://www.digitalocean.com/community/tutorials/how-to-handle-apt-key-and-add-apt-repository-deprecation-using-gpg-to-add-external-repositories-on-ubuntu-22-04 Warning The assertion below doesn\u2019t match some of the installation guides from major vendors On /usr/share/keyrings vs /etc/apt/keyrings : if it is a key from a maintainer and it should be eventually updated by him (at the latest if you install a package called REPONAME-archive-keyring ) then it must be placed at /usr/share/keyrings , if no mater what, only you as the \u201clocal admin\u201d should be able touch the key, you must place it at /etc/apt/keyrings Source: https://askubuntu.com/questions/1437207/what-is-the-right-place-to-put-keyrings-for-repositories Networking \u00b6 Follow the guide . Browsers \u00b6 Follow the guide . Gnome extensions \u00b6 Follow the guide . Fonts \u00b6 Follow the guide . Terminal \u00b6 We strongly recommend using terminator , which should replace the native terminal and be available via the ++Ctrl+Alt+T++ shortcut. To set the color of the title bar from red to something less tiring: tee ${ HOME } /.config/terminator/config > /dev/null <<EOF [profiles] [[default]] title_transmit_bg_color = \"#613583\" EOF NyanCat for terminal, an absolute must \u00b6 Todo See what the correct install dir for this should be, likely in .local NYANCAT_INSTALL_DIR = \" ${ HOME } /.nyancat\" git clone \"https://github.com/klange/nyancat.git\" \" ${ NYANCAT_INSTALL_DIR } \" make -C \" ${ NYANCAT_INSTALL_DIR } \" ln -s -f \" ${ NYANCAT_INSTALL_DIR } /src/nyancat\" \" ${ HOME } /.local/bin/nyancat\" Shell: Zsh + Oh My Zsh + PowerLevel10k \u00b6 Follow the guide . Languages and tool chains \u00b6 Warning Every language is optional based on your project needs and inclinations. Python \u00b6 Follow the guide . Golang \u00b6 Follow the guide . Java \u00b6 Todo Implement. Scala \u00b6 SCALA_CLI_SETUP = \" $( mktemp ) \" curl -sS -L -f \"https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz\" \\ | gzip -d > \" ${ SCALA_CLI_SETUP } \" chmod +x \" ${ SCALA_CLI_SETUP } \" \" ${ SCALA_CLI_SETUP } \" setup rm \" ${ SCALA_CLI_SETUP } \" # TODO: put java home in .zshrc # get java home, enter for the Metals extension in VS Code in settings cs java -XshowSettings:properties -version 2 > & 1 | grep \"java.home\" | sed 's/.*= *//' Rust \u00b6 https://www.rust-lang.org/tools/install Todo Implement. SSH \u00b6 Warning You MUST do this before the GitHub setup to set up access via SSH key. Follow the guide . Source control \u00b6 Git \u00b6 Follow the guide . Github \u00b6 Follow the guide . GitLab \u00b6 Follow the guide . Docker \u00b6 Follow the guide . Communication \u00b6 Slack \u00b6 Warning Optional. Install only if the web version has issues for you. sudo snap install --classic slack Teams \u00b6 Use the web version. Do NOT install any version you may find online. All versions are outdated and Microsoft advises to use the web app. Software Development \u00b6 Visual Studio Code \u00b6 https://code.visualstudio.com/docs/setup/linux sudo snap install --classic code Pycharm \u00b6 https://www.jetbrains.com/help/pycharm/installation-guide.html#snap Depending on your license choice: sudo snap install --classic pycharm-professional or: sudo snap install --classic pycharm-community Media \u00b6 Spotify \u00b6 sudo snap install spotify File management \u00b6 Double Commander \u00b6 sudo apt install -y doublecmd-gtk Todo Add config System monitor \u00b6 Glances \u00b6 https://github.com/nicolargo/glances pipx install glances Benchmarking \u00b6 Hyperfine \u00b6 HYPERFINE_DEB = \" $( mktemp ) \" HYPERFINE_REPO_URL = \"https://api.github.com/repos/sharkdp/hyperfine/releases/latest\" HYPERFINE_URL = $( curl -sS -L \" ${ HYPERFINE_REPO_URL } \" \\ | grep 'browser_download_url.*hyperfine_.*amd64\\.deb' \\ | sed -E 's/.*\"([^\"]+)\"\\s*$/\\1/' \\ ) curl -sS -L -o \" ${ HYPERFINE_DEB } \" \" ${ HYPERFINE_URL } \" sudo dpkg -i \" ${ HYPERFINE_DEB } \" rm \" ${ HYPERFINE_DEB } \" Disable Ctr-Shift-U system shortcut \u00b6 https://superuser.com/questions/358749/how-to-disable-ctrlshiftu-in-ubuntu-linux Problem The problem is that with the \u201cIbus\u201d input method, Ctrl \uff0b Shift \uff0b U is by default configured to the \u201cUnicode Code Point\u201d shortcut. You can try this: Type Ctrl \uff0b Shift \uff0b U , then an (underlined) u appears. If you then type a unicode code point number in hex (e.g. 21, the ASCII/unicode CP for !) and press enter, it is replaced with the corresponding character. Check if this is set: gsettings get org.freedesktop.ibus.panel.emoji unicode-hotkey Set it to something else: gsettings set org.freedesktop.ibus.panel.emoji unicode-hotkey \"['<Control><Super><Shift>u']\" If the shell command fails, this shortcut can be changed or disabled using the ibus-setup utility: graph TD a1[Run 'ibus-setup'] --> b[Go to 'Emoji'] a2[Open IBus Preferences] -.-> b b --> c(Go to 'Unicode code point:' <br />Click on the three dots, i.e. ...) c --> d[In the dialog, click 'Delete', then 'OK'] d --> e[Close the IBus Preferences window] Autostart \u00b6 Warning Optional. USER_AUTOSTART_DIR = \" ${ HOME } /.config/autostart\" mkdir -p ${ USER_AUTOSTART_DIR } APT_AUTOSTART_APPS =( \\ doublecmd \\ terminator \\ # google-chrome \\ org.flameshot.Flameshot.desktop \\ ) for app in \" ${ APT_AUTOSTART_APPS [@] } \" ; do cp -v \"/usr/share/applications/ ${ app } .desktop\" \" ${ USER_AUTOSTART_DIR } \" done SNAP_AUTOSTART_APPS =( \\ pycharm-professional_pycharm-professional \\ spotify_spotify \\ ) for app in \" ${ SNAP_AUTOSTART_APPS [@] } \" ; do cp -v \"/var/lib/snapd/desktop/applications/ ${ app } .desktop\" \" ${ USER_AUTOSTART_DIR } \" done Sample .desktop file creation: tee -a ${ HOME } /.config/autostart/cisco_anyconnect.desktop > /dev/null <<EOF [Desktop Entry] Type=Application Name=Cisco Anyconnect Secure Mobility Client Comment=Connect to a private network using the Cisco Anyconnect Secure Mobility Client Exec=/opt/cisco/anyconnect/bin/vpnui Icon=cisco-anyconnect Terminal=false Encoding=UTF-8 StartupNotify=true EOF Keyboard shortcuts \u00b6 Warning Optional. See the guide . UI \u00b6 Todo Add favorite apps to task bar and remove default ones Input devices \u00b6 Warning Optional. See the guide .","title":"Installation steps"},{"location":"#installation-steps","text":"This is intended for and has been tested on Ubuntu 24.04 noble numbat. Important Paste the code copied from this guide in the terminal using Ctrl \uff0b Shift \uff0b V . Important Do everything below in order, otherwise things will break. Important Do NOT run the commands twice. Some will not produce undesired effects, but others will create problems. Todo Put all scripts into shell files and include them via mkdocs snippet. Inlcude the following for all to ensure they fail fast: # disabled -u for unset variables due to weird behavior set -ex -o pipefail","title":"Installation steps"},{"location":"#grub","text":"Warning Perform only if you gave problems booting due to graphics drivers. This is useful to prevent graphic driver issues, since the OS makes assumptions and changes to video resolution before loading the GUI. This basically removes quiet and splash while adding nomodeset . The only downside is cosmetic, i.e. no splash screen and verbose output. sudo sed -i \\ 's~GRUB_CMDLINE_LINUX_DEFAULT=.*~GRUB_CMDLINE_LINUX_DEFAULT=\"nomodeset\"~' \\ /etc/default/grub sudo update-grub","title":"Grub"},{"location":"#swap","text":"Info Nothing to do here yet, only pending research. Reference articles: Part 1 Part 2","title":"Swap"},{"location":"#apt-packages---tools-and-prerequisites","text":"Follow the guide .","title":"Apt Packages - tools and prerequisites"},{"location":"#set-up-keyring-for-subsequent-apt-packages","text":"Warning You MUST do this before continuing, otherwise scripts are likely to fail. To ensure keyring dir is created and has the right permissions: KEYRING_DIR = /etc/apt/keyrings sudo install -m 0755 -d ${ KEYRING_DIR } All the keyring-using apt installations are updated to respect the deprecation of the insecure keyring management methods apt-key add , apt-key adv , and apt-add-repository . This is a painful departure from a simple process to understanding the new system, which is both more secure and more complex to use. A comprehensive article on the topic can be found here: https://www.digitalocean.com/community/tutorials/how-to-handle-apt-key-and-add-apt-repository-deprecation-using-gpg-to-add-external-repositories-on-ubuntu-22-04 Warning The assertion below doesn\u2019t match some of the installation guides from major vendors On /usr/share/keyrings vs /etc/apt/keyrings : if it is a key from a maintainer and it should be eventually updated by him (at the latest if you install a package called REPONAME-archive-keyring ) then it must be placed at /usr/share/keyrings , if no mater what, only you as the \u201clocal admin\u201d should be able touch the key, you must place it at /etc/apt/keyrings Source: https://askubuntu.com/questions/1437207/what-is-the-right-place-to-put-keyrings-for-repositories","title":"Set up Keyring for subsequent apt packages"},{"location":"#networking","text":"Follow the guide .","title":"Networking"},{"location":"#browsers","text":"Follow the guide .","title":"Browsers"},{"location":"#gnome-extensions","text":"Follow the guide .","title":"Gnome extensions"},{"location":"#fonts","text":"Follow the guide .","title":"Fonts"},{"location":"#terminal","text":"We strongly recommend using terminator , which should replace the native terminal and be available via the ++Ctrl+Alt+T++ shortcut. To set the color of the title bar from red to something less tiring: tee ${ HOME } /.config/terminator/config > /dev/null <<EOF [profiles] [[default]] title_transmit_bg_color = \"#613583\" EOF","title":"Terminal"},{"location":"#nyancat-for-terminal-an-absolute-must","text":"Todo See what the correct install dir for this should be, likely in .local NYANCAT_INSTALL_DIR = \" ${ HOME } /.nyancat\" git clone \"https://github.com/klange/nyancat.git\" \" ${ NYANCAT_INSTALL_DIR } \" make -C \" ${ NYANCAT_INSTALL_DIR } \" ln -s -f \" ${ NYANCAT_INSTALL_DIR } /src/nyancat\" \" ${ HOME } /.local/bin/nyancat\"","title":"NyanCat for terminal, an absolute must"},{"location":"#shell-zsh--oh-my-zsh--powerlevel10k","text":"Follow the guide .","title":"Shell: Zsh + Oh My Zsh + PowerLevel10k"},{"location":"#languages-and-tool-chains","text":"Warning Every language is optional based on your project needs and inclinations.","title":"Languages and tool chains"},{"location":"#python","text":"Follow the guide .","title":"Python"},{"location":"#golang","text":"Follow the guide .","title":"Golang"},{"location":"#java","text":"Todo Implement.","title":"Java"},{"location":"#scala","text":"SCALA_CLI_SETUP = \" $( mktemp ) \" curl -sS -L -f \"https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz\" \\ | gzip -d > \" ${ SCALA_CLI_SETUP } \" chmod +x \" ${ SCALA_CLI_SETUP } \" \" ${ SCALA_CLI_SETUP } \" setup rm \" ${ SCALA_CLI_SETUP } \" # TODO: put java home in .zshrc # get java home, enter for the Metals extension in VS Code in settings cs java -XshowSettings:properties -version 2 > & 1 | grep \"java.home\" | sed 's/.*= *//'","title":"Scala"},{"location":"#rust","text":"https://www.rust-lang.org/tools/install Todo Implement.","title":"Rust"},{"location":"#ssh","text":"Warning You MUST do this before the GitHub setup to set up access via SSH key. Follow the guide .","title":"SSH"},{"location":"#source-control","text":"","title":"Source control"},{"location":"#git","text":"Follow the guide .","title":"Git"},{"location":"#github","text":"Follow the guide .","title":"Github"},{"location":"#gitlab","text":"Follow the guide .","title":"GitLab"},{"location":"#docker","text":"Follow the guide .","title":"Docker"},{"location":"#communication","text":"","title":"Communication"},{"location":"#slack","text":"Warning Optional. Install only if the web version has issues for you. sudo snap install --classic slack","title":"Slack"},{"location":"#teams","text":"Use the web version. Do NOT install any version you may find online. All versions are outdated and Microsoft advises to use the web app.","title":"Teams"},{"location":"#software-development","text":"","title":"Software Development"},{"location":"#visual-studio-code","text":"https://code.visualstudio.com/docs/setup/linux sudo snap install --classic code","title":"Visual Studio Code"},{"location":"#pycharm","text":"https://www.jetbrains.com/help/pycharm/installation-guide.html#snap Depending on your license choice: sudo snap install --classic pycharm-professional or: sudo snap install --classic pycharm-community","title":"Pycharm"},{"location":"#media","text":"","title":"Media"},{"location":"#spotify","text":"sudo snap install spotify","title":"Spotify"},{"location":"#file-management","text":"","title":"File management"},{"location":"#double-commander","text":"sudo apt install -y doublecmd-gtk Todo Add config","title":"Double Commander"},{"location":"#system-monitor","text":"","title":"System monitor"},{"location":"#glances","text":"https://github.com/nicolargo/glances pipx install glances","title":"Glances"},{"location":"#benchmarking","text":"","title":"Benchmarking"},{"location":"#hyperfine","text":"HYPERFINE_DEB = \" $( mktemp ) \" HYPERFINE_REPO_URL = \"https://api.github.com/repos/sharkdp/hyperfine/releases/latest\" HYPERFINE_URL = $( curl -sS -L \" ${ HYPERFINE_REPO_URL } \" \\ | grep 'browser_download_url.*hyperfine_.*amd64\\.deb' \\ | sed -E 's/.*\"([^\"]+)\"\\s*$/\\1/' \\ ) curl -sS -L -o \" ${ HYPERFINE_DEB } \" \" ${ HYPERFINE_URL } \" sudo dpkg -i \" ${ HYPERFINE_DEB } \" rm \" ${ HYPERFINE_DEB } \"","title":"Hyperfine"},{"location":"#disable-ctr-shift-u-system-shortcut","text":"https://superuser.com/questions/358749/how-to-disable-ctrlshiftu-in-ubuntu-linux Problem The problem is that with the \u201cIbus\u201d input method, Ctrl \uff0b Shift \uff0b U is by default configured to the \u201cUnicode Code Point\u201d shortcut. You can try this: Type Ctrl \uff0b Shift \uff0b U , then an (underlined) u appears. If you then type a unicode code point number in hex (e.g. 21, the ASCII/unicode CP for !) and press enter, it is replaced with the corresponding character. Check if this is set: gsettings get org.freedesktop.ibus.panel.emoji unicode-hotkey Set it to something else: gsettings set org.freedesktop.ibus.panel.emoji unicode-hotkey \"['<Control><Super><Shift>u']\" If the shell command fails, this shortcut can be changed or disabled using the ibus-setup utility: graph TD a1[Run 'ibus-setup'] --> b[Go to 'Emoji'] a2[Open IBus Preferences] -.-> b b --> c(Go to 'Unicode code point:' <br />Click on the three dots, i.e. ...) c --> d[In the dialog, click 'Delete', then 'OK'] d --> e[Close the IBus Preferences window]","title":"Disable Ctr-Shift-U system shortcut"},{"location":"#autostart","text":"Warning Optional. USER_AUTOSTART_DIR = \" ${ HOME } /.config/autostart\" mkdir -p ${ USER_AUTOSTART_DIR } APT_AUTOSTART_APPS =( \\ doublecmd \\ terminator \\ # google-chrome \\ org.flameshot.Flameshot.desktop \\ ) for app in \" ${ APT_AUTOSTART_APPS [@] } \" ; do cp -v \"/usr/share/applications/ ${ app } .desktop\" \" ${ USER_AUTOSTART_DIR } \" done SNAP_AUTOSTART_APPS =( \\ pycharm-professional_pycharm-professional \\ spotify_spotify \\ ) for app in \" ${ SNAP_AUTOSTART_APPS [@] } \" ; do cp -v \"/var/lib/snapd/desktop/applications/ ${ app } .desktop\" \" ${ USER_AUTOSTART_DIR } \" done Sample .desktop file creation: tee -a ${ HOME } /.config/autostart/cisco_anyconnect.desktop > /dev/null <<EOF [Desktop Entry] Type=Application Name=Cisco Anyconnect Secure Mobility Client Comment=Connect to a private network using the Cisco Anyconnect Secure Mobility Client Exec=/opt/cisco/anyconnect/bin/vpnui Icon=cisco-anyconnect Terminal=false Encoding=UTF-8 StartupNotify=true EOF","title":"Autostart"},{"location":"#keyboard-shortcuts","text":"Warning Optional. See the guide .","title":"Keyboard shortcuts"},{"location":"#ui","text":"Todo Add favorite apps to task bar and remove default ones","title":"UI"},{"location":"#input-devices","text":"Warning Optional. See the guide .","title":"Input devices"},{"location":"apt_packages/","text":"Apt packages \u00b6 Important Install these before anything else in this guide, many of them are dependencies. Warning After the apt commands you might get a list of packages that are considered to no longer be required, followed by the following advice: Use 'sudo apt autoremove' to remove them. Do NOT run this unless you know EXACTLY what the involved packages do. PACKAGES =() # build PACKAGES +=( make build-essential gettext ) # source control PACKAGES +=( git ) # man pages PACKAGES +=( manpages-dev man-db manpages-posix-dev ) # editor PACKAGES +=( vim ) # network PACKAGES +=( wget curl libpcap-dev libnet1-dev rpcbind openssh-client openssh-server nmap ) # iproute2 is installed by default, but the docs aren't PACKAGES +=( iproute2-doc ) # includes older utilities, iproute2 is the newer alternative: # arp, hostname, ifconfig, netstat, rarp, route, # plipconfig, slattach, mii-tool, iptunnel, ipmaddr PACKAGES +=( net-tools traceroute iftop hping3 vnstat iptraf dstat ) # TODO: find resolvconf replacement # network fs mounting PACKAGES +=( cifs-utils ) # docker requirements PACKAGES +=( apt-transport-https ca-certificates software-properties-common ) # pyenv requirements # https://github.com/pyenv/pyenv/wiki#suggested-build-environment PACKAGES +=( libssl-dev zlib1g-dev \\ libbz2-dev libreadline-dev libsqlite3-dev \\ libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \\ llvm ) # TODO: find what requires this PACKAGES +=( python3-openssl ) # TODO: find what requires these, likely python related PACKAGES +=( libgdbm-dev libnss3-dev ) # python dev PACKAGES +=( python3-pip python3-venv ) # security PACKAGES +=( keychain gnupg ) # hardware diagnostics PACKAGES +=( lm-sensors gir1.2-gtop-2.0 gir1.2-nm-1.0 gir1.2-clutter-1.0 ) # system monitor PACKAGES +=( htop ncdu ) # terminal PACKAGES +=( terminator tmux xclip ) # file management and search PACKAGES +=( tree fd-find ripgrep ) # converters PACKAGES +=( html2text bat jq ) # linting PACKAGES +=( shellcheck ) # environment variable management PACKAGES +=( direnv ) # windows compatiblity PACKAGES +=( dos2unix ) # system configuration (ui) PACKAGES +=( font-manager ) # idle state management PACKAGES +=( xidle ) # screenshot and annotation PACKAGES +=( flameshot ) # typo helper # TODO: see why thefuck isn't working # clipboard PACKAGES +=( gpaste-2 ) sudo apt update sudo apt full-upgrade -y sudo apt install -y ${ PACKAGES [@] } # TODO: see if this is still an issue # to solve apt clash due to rust packaging error # sudo apt install -o Dpkg::Options::=\"--force-overwrite\" bat ripgrep # symlinks for programs with already claimed binary names mkdir -p \" ${ HOME } /.local/bin\" ln -s \" $( which batcat ) \" \" ${ HOME } /.local/bin/bat\" ln -s \" $( which fdfind ) \" \" ${ HOME } /.local/bin/fd\" Todo Configure flameshot and other installed software above.","title":"Apt packages"},{"location":"apt_packages/#apt-packages","text":"Important Install these before anything else in this guide, many of them are dependencies. Warning After the apt commands you might get a list of packages that are considered to no longer be required, followed by the following advice: Use 'sudo apt autoremove' to remove them. Do NOT run this unless you know EXACTLY what the involved packages do. PACKAGES =() # build PACKAGES +=( make build-essential gettext ) # source control PACKAGES +=( git ) # man pages PACKAGES +=( manpages-dev man-db manpages-posix-dev ) # editor PACKAGES +=( vim ) # network PACKAGES +=( wget curl libpcap-dev libnet1-dev rpcbind openssh-client openssh-server nmap ) # iproute2 is installed by default, but the docs aren't PACKAGES +=( iproute2-doc ) # includes older utilities, iproute2 is the newer alternative: # arp, hostname, ifconfig, netstat, rarp, route, # plipconfig, slattach, mii-tool, iptunnel, ipmaddr PACKAGES +=( net-tools traceroute iftop hping3 vnstat iptraf dstat ) # TODO: find resolvconf replacement # network fs mounting PACKAGES +=( cifs-utils ) # docker requirements PACKAGES +=( apt-transport-https ca-certificates software-properties-common ) # pyenv requirements # https://github.com/pyenv/pyenv/wiki#suggested-build-environment PACKAGES +=( libssl-dev zlib1g-dev \\ libbz2-dev libreadline-dev libsqlite3-dev \\ libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev \\ llvm ) # TODO: find what requires this PACKAGES +=( python3-openssl ) # TODO: find what requires these, likely python related PACKAGES +=( libgdbm-dev libnss3-dev ) # python dev PACKAGES +=( python3-pip python3-venv ) # security PACKAGES +=( keychain gnupg ) # hardware diagnostics PACKAGES +=( lm-sensors gir1.2-gtop-2.0 gir1.2-nm-1.0 gir1.2-clutter-1.0 ) # system monitor PACKAGES +=( htop ncdu ) # terminal PACKAGES +=( terminator tmux xclip ) # file management and search PACKAGES +=( tree fd-find ripgrep ) # converters PACKAGES +=( html2text bat jq ) # linting PACKAGES +=( shellcheck ) # environment variable management PACKAGES +=( direnv ) # windows compatiblity PACKAGES +=( dos2unix ) # system configuration (ui) PACKAGES +=( font-manager ) # idle state management PACKAGES +=( xidle ) # screenshot and annotation PACKAGES +=( flameshot ) # typo helper # TODO: see why thefuck isn't working # clipboard PACKAGES +=( gpaste-2 ) sudo apt update sudo apt full-upgrade -y sudo apt install -y ${ PACKAGES [@] } # TODO: see if this is still an issue # to solve apt clash due to rust packaging error # sudo apt install -o Dpkg::Options::=\"--force-overwrite\" bat ripgrep # symlinks for programs with already claimed binary names mkdir -p \" ${ HOME } /.local/bin\" ln -s \" $( which batcat ) \" \" ${ HOME } /.local/bin/bat\" ln -s \" $( which fdfind ) \" \" ${ HOME } /.local/bin/fd\" Todo Configure flameshot and other installed software above.","title":"Apt packages"},{"location":"browsers/","text":"Browsers \u00b6 Google Chrome \u00b6 DEB_FILE = \" $( mktemp ) \" URL = \"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\" curl -sS -L -o \" ${ DEB_FILE } \" \" ${ URL } \" sudo dpkg -i \" ${ DEB_FILE } \" rm -v -f \" ${ DEB_FILE } \" Microsoft Edge \u00b6 # add the official GPG key to the keyring KEY_FILE = /etc/apt/keyrings/microsoft.gpg curl -sS -L -f https://packages.microsoft.com/keys/microsoft.asc \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) ARCH = $( dpkg --print-architecture ) REPO_URL = https://packages.microsoft.com/repos/edge LIST_NAME = microsoft-edge-dev echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } stable main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y microsoft-edge-stable","title":"Browsers"},{"location":"browsers/#browsers","text":"","title":"Browsers"},{"location":"browsers/#google-chrome","text":"DEB_FILE = \" $( mktemp ) \" URL = \"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\" curl -sS -L -o \" ${ DEB_FILE } \" \" ${ URL } \" sudo dpkg -i \" ${ DEB_FILE } \" rm -v -f \" ${ DEB_FILE } \"","title":"Google Chrome"},{"location":"browsers/#microsoft-edge","text":"# add the official GPG key to the keyring KEY_FILE = /etc/apt/keyrings/microsoft.gpg curl -sS -L -f https://packages.microsoft.com/keys/microsoft.asc \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) ARCH = $( dpkg --print-architecture ) REPO_URL = https://packages.microsoft.com/repos/edge LIST_NAME = microsoft-edge-dev echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } stable main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y microsoft-edge-stable","title":"Microsoft Edge"},{"location":"cloud/","text":"Cloud \u00b6 Terraform \u00b6 https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli#install-terraform # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /etc/apt/keyrings/hashicorp-archive-keyring.gpg curl -sS -L https://apt.releases.hashicorp.com/gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) REPO_URL = https://apt.releases.hashicorp.com LIST_NAME = hashicorp echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } ${ OS_CODENAME } main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y terraform Todo See if this script doesn\u2019t cause problems with zsh. If you want to enable autocompletion: terraform -install-autocomplete Google Cloud SDK and CLI \u00b6 Warning This is optional, do not install unless you\u2019re planning to work with Google Cloud. https://cloud.google.com/sdk/docs/install#deb # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /usr/share/keyrings/cloud.google.gpg curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources REPO_URL = https://packages.cloud.google.com/apt LIST_NAME = google-cloud-sdk echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y google-cloud-sdk GOOGLE_INSTALL_PACKAGES =( google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-python-extras google-cloud-sdk-bigtable-emulator google-cloud-sdk-cbt google-cloud-sdk-cloud-build-local google-cloud-sdk-config-connector google-cloud-sdk-datalab google-cloud-sdk-datastore-emulator google-cloud-sdk-firestore-emulator google-cloud-sdk-kind google-cloud-sdk-kpt google-cloud-sdk-kubectl-oidc google-cloud-sdk-local-extract google-cloud-sdk-minikube google-cloud-sdk-pubsub-emulator google-cloud-sdk-skaffold kubectl ) sudo apt install -y ${ GOOGLE_INSTALL_PACKAGES [@] } Although not essential (see below), docker-credential-gcr is missing from apt packages. https://github.com/GoogleCloudPlatform/docker-credential-gcr Note: docker-credential-gcr is primarily intended for users wishing to authenticate with GCR in the absence of gcloud , though they are not mutually exclusive. For normal development setups, users are encouraged to use gcloud auth configure-docker , instead. To later update all the packages: GOOGLE_UPDATE_PACKAGES =( google-cloud-sdk google-cloud-sdk-anthos-auth google-cloud-sdk-app-engine-go google-cloud-sdk-app-engine-grpc google-cloud-sdk-app-engine-java google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-python-extras google-cloud-sdk-bigtable-emulator google-cloud-sdk-cbt google-cloud-sdk-cloud-build-local google-cloud-sdk-config-connector google-cloud-sdk-datalab google-cloud-sdk-datastore-emulator google-cloud-sdk-firestore-emulator google-cloud-sdk-kind google-cloud-sdk-kpt google-cloud-sdk-kubectl-oidc google-cloud-sdk-local-extract google-cloud-sdk-minikube google-cloud-sdk-pubsub-emulator google-cloud-sdk-skaffold google-cloud-sdk-spanner-emulator kubectl ) sudo apt install -y --only-upgrade ${ GOOGLE_UPDATE_PACKAGES [@] } To fix GPG key expiration, run: KEY_FILE = /usr/share/keyrings/cloud.google.gpg curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } Todo Add auth instructions. To configure: gcloud init","title":"Cloud"},{"location":"cloud/#cloud","text":"","title":"Cloud"},{"location":"cloud/#terraform","text":"https://developer.hashicorp.com/terraform/tutorials/aws-get-started/install-cli#install-terraform # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /etc/apt/keyrings/hashicorp-archive-keyring.gpg curl -sS -L https://apt.releases.hashicorp.com/gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) REPO_URL = https://apt.releases.hashicorp.com LIST_NAME = hashicorp echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } ${ OS_CODENAME } main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y terraform Todo See if this script doesn\u2019t cause problems with zsh. If you want to enable autocompletion: terraform -install-autocomplete","title":"Terraform"},{"location":"cloud/#google-cloud-sdk-and-cli","text":"Warning This is optional, do not install unless you\u2019re planning to work with Google Cloud. https://cloud.google.com/sdk/docs/install#deb # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /usr/share/keyrings/cloud.google.gpg curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources REPO_URL = https://packages.cloud.google.com/apt LIST_NAME = google-cloud-sdk echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y google-cloud-sdk GOOGLE_INSTALL_PACKAGES =( google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-python-extras google-cloud-sdk-bigtable-emulator google-cloud-sdk-cbt google-cloud-sdk-cloud-build-local google-cloud-sdk-config-connector google-cloud-sdk-datalab google-cloud-sdk-datastore-emulator google-cloud-sdk-firestore-emulator google-cloud-sdk-kind google-cloud-sdk-kpt google-cloud-sdk-kubectl-oidc google-cloud-sdk-local-extract google-cloud-sdk-minikube google-cloud-sdk-pubsub-emulator google-cloud-sdk-skaffold kubectl ) sudo apt install -y ${ GOOGLE_INSTALL_PACKAGES [@] } Although not essential (see below), docker-credential-gcr is missing from apt packages. https://github.com/GoogleCloudPlatform/docker-credential-gcr Note: docker-credential-gcr is primarily intended for users wishing to authenticate with GCR in the absence of gcloud , though they are not mutually exclusive. For normal development setups, users are encouraged to use gcloud auth configure-docker , instead. To later update all the packages: GOOGLE_UPDATE_PACKAGES =( google-cloud-sdk google-cloud-sdk-anthos-auth google-cloud-sdk-app-engine-go google-cloud-sdk-app-engine-grpc google-cloud-sdk-app-engine-java google-cloud-sdk-app-engine-python google-cloud-sdk-app-engine-python-extras google-cloud-sdk-bigtable-emulator google-cloud-sdk-cbt google-cloud-sdk-cloud-build-local google-cloud-sdk-config-connector google-cloud-sdk-datalab google-cloud-sdk-datastore-emulator google-cloud-sdk-firestore-emulator google-cloud-sdk-kind google-cloud-sdk-kpt google-cloud-sdk-kubectl-oidc google-cloud-sdk-local-extract google-cloud-sdk-minikube google-cloud-sdk-pubsub-emulator google-cloud-sdk-skaffold google-cloud-sdk-spanner-emulator kubectl ) sudo apt install -y --only-upgrade ${ GOOGLE_UPDATE_PACKAGES [@] } To fix GPG key expiration, run: KEY_FILE = /usr/share/keyrings/cloud.google.gpg curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \\ | sudo gpg --dearmor -o ${ KEY_FILE } Todo Add auth instructions. To configure: gcloud init","title":"Google Cloud SDK and CLI"},{"location":"docker/","text":"Docker \u00b6 https://docs.docker.com/engine/install/ubuntu/ https://docs.docker.com/engine/install/linux-postinstall/ If you\u2019ve previously installed Docker uninstall everything: for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc do sudo apt remove $pkg done Add the repository: # add the official GPG key to the keyring KEY_FILE = /etc/apt/keyrings/docker.asc sudo curl -sS -L https://download.docker.com/linux/ubuntu/gpg -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) ARCH = $( dpkg --print-architecture ) REPO_URL = https://download.docker.com/linux/ubuntu LIST_NAME = docker echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } ${ OS_CODENAME } stable\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update Make sure you are about to install from the Docker repo instead of the default Ubuntu repo, namely docker-ce shouldn\u2019t be installed, the candidate for installation should be from the Docker repository for Ubuntu 24.04 (noble): apt-cache policy docker-ce Install: sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Check that it\u2019s running: sudo systemctl status docker If you get: ERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running? If it is stopped and masked: Loaded: masked (Reason: Unit docker.service is masked.) then you need to unmask the service: sudo systemctl unmask docker On problems with the socket docker binds on you can allow your user to be owner of the socket: sudo chown $USER :docker /var/run/docker.sock Run docker without sudo : # add the docker group if it doesn't already exist sudo groupadd docker # add docker group to the user sudo gpasswd --add ${ USER } docker # alternative method, less safe since without -a it would remove the user from all other groups # sudo usermod -aG docker $USER # ? ACTION: Log out and login back again to refresh group membership. # activate group changes right away newgrp docker # restart the docker daemon for the group changes to take effect sudo service docker restart Check you can run without sudo : docker run hello-world https://docs.docker.com/reference/cli/dockerd/#daemon-configuration-file https://docs.docker.com/config/containers/logging/configure/ Todo Add the local subnet to DNS settings in a scripted way. Change daemon storage driver to overlay2 and cgroup driver to systemd , set up DNS, logging: LOCAL_SUBNET_IP = \"192.168.100.1\" sudo tee \"/etc/docker/daemon.json\" >/dev/null <<EOF { \"dns\": [\"1.1.1.1\", \"1.0.0.1\", \"8.8.8.8\", \"${LOCAL_SUBNET_IP}\"], \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"local\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"5\" }, \"storage-driver\": \"overlay2\" } EOF sudo mkdir -p /etc/systemd/system/docker.service.d # restart docker sudo systemctl daemon-reload sudo systemctl restart docker Check the your storage driver is overlay2 and cgroup driver is systemd : docker info Dive (Docker image inspection) \u00b6 https://github.com/wagoodman/dive?tab=readme-ov-file#installation DIVE_REPO = \"wagoodman/dive\" DIVE_VERSION = $( curl \"https://api.github.com/repos/ ${ DIVE_REPO } /releases/latest\" \\ | grep '\"tag_name\": \"v' \\ | sed -E 's#\\s*\"tag_name\": \"v([^\"]+)\".*#\\1#' ) DIVE_URL = \"https://github.com/ ${ DIVE_REPO } /releases/download/v ${ DIVE_VERSION } /dive_ ${ DIVE_VERSION } _linux_amd64.deb\" DIVE_DEB = \" $( mktemp ) \" curl -sS -L -o \" ${ DIVE_DEB } \" \" ${ DIVE_URL } \" sudo dpkg -i \" ${ DIVE_DEB } \" rm \" ${ DIVE_DEB } \"","title":"Docker"},{"location":"docker/#docker","text":"https://docs.docker.com/engine/install/ubuntu/ https://docs.docker.com/engine/install/linux-postinstall/ If you\u2019ve previously installed Docker uninstall everything: for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc do sudo apt remove $pkg done Add the repository: # add the official GPG key to the keyring KEY_FILE = /etc/apt/keyrings/docker.asc sudo curl -sS -L https://download.docker.com/linux/ubuntu/gpg -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources OS_CODENAME = $( . /etc/os-release && echo \" ${ VERSION_CODENAME } \" ) ARCH = $( dpkg --print-architecture ) REPO_URL = https://download.docker.com/linux/ubuntu LIST_NAME = docker echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } ${ OS_CODENAME } stable\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update Make sure you are about to install from the Docker repo instead of the default Ubuntu repo, namely docker-ce shouldn\u2019t be installed, the candidate for installation should be from the Docker repository for Ubuntu 24.04 (noble): apt-cache policy docker-ce Install: sudo apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin Check that it\u2019s running: sudo systemctl status docker If you get: ERROR: Couldn't connect to Docker daemon at http+docker://localhost - is it running? If it is stopped and masked: Loaded: masked (Reason: Unit docker.service is masked.) then you need to unmask the service: sudo systemctl unmask docker On problems with the socket docker binds on you can allow your user to be owner of the socket: sudo chown $USER :docker /var/run/docker.sock Run docker without sudo : # add the docker group if it doesn't already exist sudo groupadd docker # add docker group to the user sudo gpasswd --add ${ USER } docker # alternative method, less safe since without -a it would remove the user from all other groups # sudo usermod -aG docker $USER # ? ACTION: Log out and login back again to refresh group membership. # activate group changes right away newgrp docker # restart the docker daemon for the group changes to take effect sudo service docker restart Check you can run without sudo : docker run hello-world https://docs.docker.com/reference/cli/dockerd/#daemon-configuration-file https://docs.docker.com/config/containers/logging/configure/ Todo Add the local subnet to DNS settings in a scripted way. Change daemon storage driver to overlay2 and cgroup driver to systemd , set up DNS, logging: LOCAL_SUBNET_IP = \"192.168.100.1\" sudo tee \"/etc/docker/daemon.json\" >/dev/null <<EOF { \"dns\": [\"1.1.1.1\", \"1.0.0.1\", \"8.8.8.8\", \"${LOCAL_SUBNET_IP}\"], \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"log-driver\": \"local\", \"log-opts\": { \"max-size\": \"20m\", \"max-file\": \"5\" }, \"storage-driver\": \"overlay2\" } EOF sudo mkdir -p /etc/systemd/system/docker.service.d # restart docker sudo systemctl daemon-reload sudo systemctl restart docker Check the your storage driver is overlay2 and cgroup driver is systemd : docker info","title":"Docker"},{"location":"docker/#dive-docker-image-inspection","text":"https://github.com/wagoodman/dive?tab=readme-ov-file#installation DIVE_REPO = \"wagoodman/dive\" DIVE_VERSION = $( curl \"https://api.github.com/repos/ ${ DIVE_REPO } /releases/latest\" \\ | grep '\"tag_name\": \"v' \\ | sed -E 's#\\s*\"tag_name\": \"v([^\"]+)\".*#\\1#' ) DIVE_URL = \"https://github.com/ ${ DIVE_REPO } /releases/download/v ${ DIVE_VERSION } /dive_ ${ DIVE_VERSION } _linux_amd64.deb\" DIVE_DEB = \" $( mktemp ) \" curl -sS -L -o \" ${ DIVE_DEB } \" \" ${ DIVE_URL } \" sudo dpkg -i \" ${ DIVE_DEB } \" rm \" ${ DIVE_DEB } \"","title":"Dive (Docker image inspection)"},{"location":"extras/","text":"Extras \u00b6 Warning Optional. Fix CRLF \u00b6 # find . -type f | xargs file -k -- | grep CRLF | wc -l # find . -type f | xargs dos2unix # chmod go-w -R * # sudo find . -type f | xargs chmod a-x","title":"Extras"},{"location":"extras/#extras","text":"Warning Optional.","title":"Extras"},{"location":"extras/#fix-crlf","text":"# find . -type f | xargs file -k -- | grep CRLF | wc -l # find . -type f | xargs dos2unix # chmod go-w -R * # sudo find . -type f | xargs chmod a-x","title":"Fix CRLF"},{"location":"fonts/","text":"Fonts \u00b6 Install nerd fonts, patched with the many glyphs required for a beautiful terminal. Troubleshooting When you put the fonts in that specified directory, Ubuntu will automatically start caching. After 5-6 seconds, the fonts should appear in listing. Close any open application before you want to change the font for it. Font files should have the permission of 644 , and the containing folder should have 755 . If the fonts are missing from listing, check the permissions of those files and folders. FONTS_DIR = \" ${ HOME } /.local/share/fonts\" mkdir -p \" ${ FONTS_DIR } \" function copy_fonts () { font_extension = \" ${ 1 } \" # exclude Mono and Windows fonts from Nerd Fonts packages echo -n \" $( find ${ font_temp_dir } -maxdepth 1 -type f \\ -name \" ${ font_extension } \" \\ -not -iname \"*windows*\" \\ -not -iname \"*complete mono. ${ font_extension } \" \\ -exec cp -v \"{}\" \" ${ FONTS_DIR } \" \\; ) \" } function get_uri_last_token_without_extension () { repo_url = ${ 1 } printf ${ repo_url } | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 } function install_font_from_zip_url () { font_url = \" ${ 1 } \" font_archive_name = \" $( get_uri_last_token_without_extension ${ font_url } ) \" font_temp_dir = \"/tmp/ ${ font_archive_name } \" font_temp_zip_path = \" ${ font_temp_dir } / ${ font_archive_name } .zip\" mkdir -p \" ${ font_temp_dir } \" curl -sS -L -o \" ${ font_temp_zip_path } \" \" ${ font_url } \" # -j prevents directory creation, i.e. all files end up in unzip root unzip -j -o \" ${ font_temp_zip_path } \" -d \" ${ font_temp_dir } \" # install .otf fonts, if found, else .ttf otf_output = $( copy_fonts \"*.otf\" ) if [ ! -z \" ${ otf_output } \" ] ; then echo ${ otf_output } else echo \"No .otf files found, trying .ttf.\" ttf_output = $( copy_fonts \"*.ttf\" ) if [ ! -z \" ${ ttf_output } \" ] ; then echo ${ ttf_output } else echo \"No .otf or .ttf files found, nothing copied.\" fi fi rm -v -rf \" ${ font_temp_dir } \" } # Nerd Fonts, see https://github.com/ryanoasis/nerd-fonts/releases/latest NERD_FONT_URLS =( \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/SourceCodePro.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Meslo.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/RobotoMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Ubuntu.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/UbuntuMono.zip\" ) for url in \" ${ NERD_FONT_URLS [@] } \" ; do install_font_from_zip_url ${ url } done fc-cache -v -f Warning If the following command fails, wait a few minutes and run it again: fc-cache -v -f","title":"Fonts"},{"location":"fonts/#fonts","text":"Install nerd fonts, patched with the many glyphs required for a beautiful terminal. Troubleshooting When you put the fonts in that specified directory, Ubuntu will automatically start caching. After 5-6 seconds, the fonts should appear in listing. Close any open application before you want to change the font for it. Font files should have the permission of 644 , and the containing folder should have 755 . If the fonts are missing from listing, check the permissions of those files and folders. FONTS_DIR = \" ${ HOME } /.local/share/fonts\" mkdir -p \" ${ FONTS_DIR } \" function copy_fonts () { font_extension = \" ${ 1 } \" # exclude Mono and Windows fonts from Nerd Fonts packages echo -n \" $( find ${ font_temp_dir } -maxdepth 1 -type f \\ -name \" ${ font_extension } \" \\ -not -iname \"*windows*\" \\ -not -iname \"*complete mono. ${ font_extension } \" \\ -exec cp -v \"{}\" \" ${ FONTS_DIR } \" \\; ) \" } function get_uri_last_token_without_extension () { repo_url = ${ 1 } printf ${ repo_url } | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 } function install_font_from_zip_url () { font_url = \" ${ 1 } \" font_archive_name = \" $( get_uri_last_token_without_extension ${ font_url } ) \" font_temp_dir = \"/tmp/ ${ font_archive_name } \" font_temp_zip_path = \" ${ font_temp_dir } / ${ font_archive_name } .zip\" mkdir -p \" ${ font_temp_dir } \" curl -sS -L -o \" ${ font_temp_zip_path } \" \" ${ font_url } \" # -j prevents directory creation, i.e. all files end up in unzip root unzip -j -o \" ${ font_temp_zip_path } \" -d \" ${ font_temp_dir } \" # install .otf fonts, if found, else .ttf otf_output = $( copy_fonts \"*.otf\" ) if [ ! -z \" ${ otf_output } \" ] ; then echo ${ otf_output } else echo \"No .otf files found, trying .ttf.\" ttf_output = $( copy_fonts \"*.ttf\" ) if [ ! -z \" ${ ttf_output } \" ] ; then echo ${ ttf_output } else echo \"No .otf or .ttf files found, nothing copied.\" fi fi rm -v -rf \" ${ font_temp_dir } \" } # Nerd Fonts, see https://github.com/ryanoasis/nerd-fonts/releases/latest NERD_FONT_URLS =( \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/SourceCodePro.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/JetBrainsMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Meslo.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/RobotoMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraMono.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/Ubuntu.zip\" \"https://github.com/ryanoasis/nerd-fonts/releases/latest/download/UbuntuMono.zip\" ) for url in \" ${ NERD_FONT_URLS [@] } \" ; do install_font_from_zip_url ${ url } done fc-cache -v -f Warning If the following command fails, wait a few minutes and run it again: fc-cache -v -f","title":"Fonts"},{"location":"games/","text":"Games \u00b6 Warning Optional. 32-bit \u00b6 sudo apt install -y libopenal1:i386 libcurl4:i386 libcurl4-openssl-dev:i386","title":"Games"},{"location":"games/#games","text":"Warning Optional.","title":"Games"},{"location":"games/#32-bit","text":"sudo apt install -y libopenal1:i386 libcurl4:i386 libcurl4-openssl-dev:i386","title":"32-bit"},{"location":"git/","text":"Git \u00b6 Multi-email config \u00b6 Config file \u00b6 Create a ${HOME}/git-projects.txt file with your personal and/or work profiles. Rules: each line in the file will be used by the script to create one directory line format is projects_directory,git_commit_name,git_commit_email no spaces allowed before or after the comma delimiters no quotes allowed, no commas allowed inside names Info You should have a directory for each profile, so that when you clone projects in each directory git automatically uses the right name, email and any other custom settings might be required. Warning If you use the example below for creating the file you must change your name and email for each context, i.e. personal GitHub or work GitHub. To create the file via command line: tee \" ${ HOME } /git-projects.txt\" >/dev/null <<EOF github.com-personal,John Smith,john.smith@gmail.com github.com-work,John Smith,john.smith@work.com gitlab.com-personal,John Smith,john.smith@gmail.com EOF Directory structure and per-directory configuration \u00b6 # Disable global user name and email in favor of project-specific ones git config --global --unset user.name git config --global --unset user.email # set up project directories and configure per-directory identities PROJECTS_ROOT = \" ${ HOME } /projects\" mkdir -p \" ${ PROJECTS_ROOT } \" IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'PROJECTS=($(<${HOME}/git-projects.txt))' for project in \" ${ PROJECTS [@] } \" ; do project_dir = $( echo ${ project } | cut -d ',' -f 1 ) user_name = $( echo ${ project } | cut -d ',' -f 2 ) user_email = $( echo ${ project } | cut -d ',' -f 3 ) project_dir_full = \" ${ PROJECTS_ROOT } / ${ project_dir } \" mkdir -p \" ${ project_dir_full } \" git config --global \\ includeIf.gitdir: \" ${ project_dir_full } /\" .path \" ${ project_dir_full } /.gitconfig\" git config --file \" ${ project_dir_full } /.gitconfig\" \\ user.name \" ${ user_name } \" git config --file \" ${ project_dir_full } /.gitconfig\" \\ user.email \" ${ user_email } \" done Global configuration \u00b6 Essentials \u00b6 # Make git aware of executable permissions git config --global core.filemode true # Push your current branch to a branch with the same name git config --global push.default current # Set VS Code as default editor git config --global core.editor code # configure the pager to just output content is below one page git config --global core.pager \"less --quit-if-one-screen --quit-at-eof --raw-control-chars --no-init\" # Display the command line interface in color git config --global color.ui auto # Show branch names with git log git config --global log.decorate auto # Enable parallel index preload for operations like git diff git config --global core.preloadindex true Diffs and merge conflict resolution with Pycharm \u00b6 Enable PyCharm as the default diff and merge tools, use with git difftool and git mergetool: # change this to pycharm-community if you are using that PYCHARM_BIN = pycharm-professional PYCHARM_PATH = \" $( which ${ PYCHARM_BIN } ) \" git config --global diff.tool ${ PYCHARM_BIN } git config --global difftool.prompt false git config --global difftool. ${ PYCHARM_BIN } .cmd \\ \\\" \" ${ PYCHARM_PATH } \" \\\" ' diff \"$LOCAL\" \"$REMOTE\"' git config --global merge.tool ${ PYCHARM_BIN } git config --global mergetool.prompt false git config --global mergetool. ${ PYCHARM_BIN } .cmd \\ \\\" \" ${ PYCHARM_PATH } \" \\\" ' merge \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"' git config --global mergetool. ${ PYCHARM_BIN } .keepBackup false Experimental \u00b6 Warning Optional. Don\u2019t use unless you understand the effects. Todo See if this is desirable. # When pulling code, always rebase your local changes git config --global pull.rebase true Todo See if this is desirable. # Automatically prune deleted branches from your local copy when you fetch or pull git config --global fetch.prune true Todo See if this is desirable. # Ignore symlinks git config --global core.symlinks false If the setting doesn\u2019t work, try: git config --global --unset core.symlinks Todo See if this is desirable. Add description. # Disable SSL verify git config --global http.sslVerify false Todo See if this is desirable. Add description. git config --global status.showUntrackedFiles all Todo See if this is desirable. Add description. git config --global transfer.fsckobjects true","title":"Git"},{"location":"git/#git","text":"","title":"Git"},{"location":"git/#multi-email-config","text":"","title":"Multi-email config"},{"location":"git/#config-file","text":"Create a ${HOME}/git-projects.txt file with your personal and/or work profiles. Rules: each line in the file will be used by the script to create one directory line format is projects_directory,git_commit_name,git_commit_email no spaces allowed before or after the comma delimiters no quotes allowed, no commas allowed inside names Info You should have a directory for each profile, so that when you clone projects in each directory git automatically uses the right name, email and any other custom settings might be required. Warning If you use the example below for creating the file you must change your name and email for each context, i.e. personal GitHub or work GitHub. To create the file via command line: tee \" ${ HOME } /git-projects.txt\" >/dev/null <<EOF github.com-personal,John Smith,john.smith@gmail.com github.com-work,John Smith,john.smith@work.com gitlab.com-personal,John Smith,john.smith@gmail.com EOF","title":"Config file"},{"location":"git/#directory-structure-and-per-directory-configuration","text":"# Disable global user name and email in favor of project-specific ones git config --global --unset user.name git config --global --unset user.email # set up project directories and configure per-directory identities PROJECTS_ROOT = \" ${ HOME } /projects\" mkdir -p \" ${ PROJECTS_ROOT } \" IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'PROJECTS=($(<${HOME}/git-projects.txt))' for project in \" ${ PROJECTS [@] } \" ; do project_dir = $( echo ${ project } | cut -d ',' -f 1 ) user_name = $( echo ${ project } | cut -d ',' -f 2 ) user_email = $( echo ${ project } | cut -d ',' -f 3 ) project_dir_full = \" ${ PROJECTS_ROOT } / ${ project_dir } \" mkdir -p \" ${ project_dir_full } \" git config --global \\ includeIf.gitdir: \" ${ project_dir_full } /\" .path \" ${ project_dir_full } /.gitconfig\" git config --file \" ${ project_dir_full } /.gitconfig\" \\ user.name \" ${ user_name } \" git config --file \" ${ project_dir_full } /.gitconfig\" \\ user.email \" ${ user_email } \" done","title":"Directory structure and per-directory configuration"},{"location":"git/#global-configuration","text":"","title":"Global configuration"},{"location":"git/#essentials","text":"# Make git aware of executable permissions git config --global core.filemode true # Push your current branch to a branch with the same name git config --global push.default current # Set VS Code as default editor git config --global core.editor code # configure the pager to just output content is below one page git config --global core.pager \"less --quit-if-one-screen --quit-at-eof --raw-control-chars --no-init\" # Display the command line interface in color git config --global color.ui auto # Show branch names with git log git config --global log.decorate auto # Enable parallel index preload for operations like git diff git config --global core.preloadindex true","title":"Essentials"},{"location":"git/#diffs-and-merge-conflict-resolution-with-pycharm","text":"Enable PyCharm as the default diff and merge tools, use with git difftool and git mergetool: # change this to pycharm-community if you are using that PYCHARM_BIN = pycharm-professional PYCHARM_PATH = \" $( which ${ PYCHARM_BIN } ) \" git config --global diff.tool ${ PYCHARM_BIN } git config --global difftool.prompt false git config --global difftool. ${ PYCHARM_BIN } .cmd \\ \\\" \" ${ PYCHARM_PATH } \" \\\" ' diff \"$LOCAL\" \"$REMOTE\"' git config --global merge.tool ${ PYCHARM_BIN } git config --global mergetool.prompt false git config --global mergetool. ${ PYCHARM_BIN } .cmd \\ \\\" \" ${ PYCHARM_PATH } \" \\\" ' merge \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"' git config --global mergetool. ${ PYCHARM_BIN } .keepBackup false","title":"Diffs and merge conflict resolution with Pycharm"},{"location":"git/#experimental","text":"Warning Optional. Don\u2019t use unless you understand the effects. Todo See if this is desirable. # When pulling code, always rebase your local changes git config --global pull.rebase true Todo See if this is desirable. # Automatically prune deleted branches from your local copy when you fetch or pull git config --global fetch.prune true Todo See if this is desirable. # Ignore symlinks git config --global core.symlinks false If the setting doesn\u2019t work, try: git config --global --unset core.symlinks Todo See if this is desirable. Add description. # Disable SSL verify git config --global http.sslVerify false Todo See if this is desirable. Add description. git config --global status.showUntrackedFiles all Todo See if this is desirable. Add description. git config --global transfer.fsckobjects true","title":"Experimental"},{"location":"github/","text":"GitHub \u00b6 gh, the GitHub CLI tool \u00b6 https://github.com/cli/cli/blob/trunk/docs/install_linux.md Warning Do NOT use snap : https://github.com/cli/cli/blob/trunk/docs/install_linux.md#snap-do-not-use Info Use the apt version, unless you prefer updating manually. apt deb github # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /etc/apt/keyrings/githubcli-archive-keyring.gpg sudo curl -sS -L https://cli.github.com/packages/githubcli-archive-keyring.gpg -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources ARCH = $( dpkg --print-architecture ) REPO_URL = https://cli.github.com/packages LIST_NAME = github-cli echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } stable main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y gh GH_DEB = \" $( mktemp ) \" VERSION = $( curl \"https://api.github.com/repos/cli/cli/releases/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) GH_URL = \"https://github.com/cli/cli/releases/download/v ${ VERSION } /gh_ ${ VERSION } _linux_amd64.deb\" curl -sS -L -o \" ${ GH_DEB } \" \" ${ GH_URL } \" sudo dpkg -i \" ${ GH_DEB } \" rm \" ${ GH_DEB } \" VERSION = $( curl \"https://api.github.com/repos/cli/cli/releases/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) URL = \"https://github.com/cli/cli/releases/download/v ${ VERSION } /gh_ ${ VERSION } _linux_amd64.tar.gz\" curl -sSL \" ${ URL } \" | tar -v -xz --directory \"/tmp\" SETUP_DIR = \"/tmp/gh_ ${ VERSION } _linux_amd64\" sudo cp \" ${ SETUP_DIR } /bin/gh\" \"/usr/local/bin/\" gzip -k \" ${ SETUP_DIR } /share/man/man1/\" * sudo cp -r \" ${ SETUP_DIR } /share/man/man1/\" *.gz \"/usr/share/man/man1/\" rm -rf \" ${ SETUP_DIR } \" Config: gh config set pager \"less --quit-if-one-screen\" gh config set editor \"code --wait\" Completions: # requires .zshrc to contain: autoload -U compinit && compinit gh completion -s zsh \\ | sudo tee \"/usr/local/share/zsh/site-functions/_gh\" >/dev/null Log gh in to github.com via ssh key using web authentication: - run the command below - select the appropriate key - copy the key name from the selected SSH file - paste the key name when asked about the SSH key name in GitHub - perform web auth following instructions in the terminal gh auth login --hostname github.com --git-protocol ssh --web","title":"GitHub"},{"location":"github/#github","text":"","title":"GitHub"},{"location":"github/#gh-the-github-cli-tool","text":"https://github.com/cli/cli/blob/trunk/docs/install_linux.md Warning Do NOT use snap : https://github.com/cli/cli/blob/trunk/docs/install_linux.md#snap-do-not-use Info Use the apt version, unless you prefer updating manually. apt deb github # add the official GPG key to the keyring and ensure it has the right permissions KEY_FILE = /etc/apt/keyrings/githubcli-archive-keyring.gpg sudo curl -sS -L https://cli.github.com/packages/githubcli-archive-keyring.gpg -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources ARCH = $( dpkg --print-architecture ) REPO_URL = https://cli.github.com/packages LIST_NAME = github-cli echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } stable main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y gh GH_DEB = \" $( mktemp ) \" VERSION = $( curl \"https://api.github.com/repos/cli/cli/releases/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) GH_URL = \"https://github.com/cli/cli/releases/download/v ${ VERSION } /gh_ ${ VERSION } _linux_amd64.deb\" curl -sS -L -o \" ${ GH_DEB } \" \" ${ GH_URL } \" sudo dpkg -i \" ${ GH_DEB } \" rm \" ${ GH_DEB } \" VERSION = $( curl \"https://api.github.com/repos/cli/cli/releases/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) URL = \"https://github.com/cli/cli/releases/download/v ${ VERSION } /gh_ ${ VERSION } _linux_amd64.tar.gz\" curl -sSL \" ${ URL } \" | tar -v -xz --directory \"/tmp\" SETUP_DIR = \"/tmp/gh_ ${ VERSION } _linux_amd64\" sudo cp \" ${ SETUP_DIR } /bin/gh\" \"/usr/local/bin/\" gzip -k \" ${ SETUP_DIR } /share/man/man1/\" * sudo cp -r \" ${ SETUP_DIR } /share/man/man1/\" *.gz \"/usr/share/man/man1/\" rm -rf \" ${ SETUP_DIR } \" Config: gh config set pager \"less --quit-if-one-screen\" gh config set editor \"code --wait\" Completions: # requires .zshrc to contain: autoload -U compinit && compinit gh completion -s zsh \\ | sudo tee \"/usr/local/share/zsh/site-functions/_gh\" >/dev/null Log gh in to github.com via ssh key using web authentication: - run the command below - select the appropriate key - copy the key name from the selected SSH file - paste the key name when asked about the SSH key name in GitHub - perform web auth following instructions in the terminal gh auth login --hostname github.com --git-protocol ssh --web","title":"gh, the GitHub CLI tool"},{"location":"gitlab/","text":"GitLab \u00b6 glab, the GitLab CLI tool \u00b6 https://gitlab.com/gitlab-org/cli#installation DEB_FILE = \" $( mktemp ) \" VERSION = $( curl -s \"https://gitlab.com/api/v4/projects/gitlab-org%2Fcli/releases/permalink/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) FILE_URL = \"https://gitlab.com/gitlab-org/cli/-/releases/v ${ VERSION } /downloads/glab_ ${ VERSION } _Linux_x86_64.deb\" curl -sS -L -o \" ${ DEB_FILE } \" \" ${ FILE_URL } \" sudo dpkg -i \" ${ DEB_FILE } \" rm \" ${ DEB_FILE } \" Config: # TODO: use glab config set Completions: # TODO: use glab completion Log gh in to gitlab.com via ssh key using web authentication: - run the command below - choose Web auth - choose SSH default Git protocol - perform web auth following instructions in the terminal glab auth login --hostname gitlab.com # TODO: see if the following are useful to run before the command to avoid choosing: # glab config set -h gitlab.com git_protocol ssh # glab config set -h gitlab.com api_protocol https # TODO: add ssh key with glab ssh-key add ~/.ssh/my_key.pub --title \"my title\" Todo See why there is no option to select the SSH key during setup.","title":"GitLab"},{"location":"gitlab/#gitlab","text":"","title":"GitLab"},{"location":"gitlab/#glab-the-gitlab-cli-tool","text":"https://gitlab.com/gitlab-org/cli#installation DEB_FILE = \" $( mktemp ) \" VERSION = $( curl -s \"https://gitlab.com/api/v4/projects/gitlab-org%2Fcli/releases/permalink/latest\" \\ | tr '\\n' ' ' \\ | sed 's/.*\"tag_name\":\\s*\"v\\([^\"]*\\)\".*/\\1/' ) FILE_URL = \"https://gitlab.com/gitlab-org/cli/-/releases/v ${ VERSION } /downloads/glab_ ${ VERSION } _Linux_x86_64.deb\" curl -sS -L -o \" ${ DEB_FILE } \" \" ${ FILE_URL } \" sudo dpkg -i \" ${ DEB_FILE } \" rm \" ${ DEB_FILE } \" Config: # TODO: use glab config set Completions: # TODO: use glab completion Log gh in to gitlab.com via ssh key using web authentication: - run the command below - choose Web auth - choose SSH default Git protocol - perform web auth following instructions in the terminal glab auth login --hostname gitlab.com # TODO: see if the following are useful to run before the command to avoid choosing: # glab config set -h gitlab.com git_protocol ssh # glab config set -h gitlab.com api_protocol https # TODO: add ssh key with glab ssh-key add ~/.ssh/my_key.pub --title \"my title\" Todo See why there is no option to select the SSH key during setup.","title":"glab, the GitLab CLI tool"},{"location":"gnome_extensions/","text":"GNOME extensions \u00b6 Ubuntu 24.04 \u00b6 Sadly, GNOME extensions are now to be installed via browser extension. Chrome is recommended, since Firefox is now installed via snap and has issues. Install the browser extension: https://chromewebstore.google.com/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep Install the native host connector for the browser extension: https://gnome.pages.gitlab.gnome.org/gnome-browser-integration/pages/installation-guide.html sudo apt update sudo apt install -y gnome-browser-connector Install: Dash to Panel https://extensions.gnome.org/extension/1160/dash-to-panel/ https://github.com/home-sweet-gnome/dash-to-panel Extension List https://extensions.gnome.org/extension/3088/extension-list/ https://github.com/tuberry/extension-list Clipboard Indicator https://extensions.gnome.org/extension/779/clipboard-indicator/ https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator GTile https://extensions.gnome.org/extension/28/gtile/ https://github.com/gTile Top Hat https://extensions.gnome.org/extension/5219/tophat/ https://github.com/fflewddur/tophat Vitals https://extensions.gnome.org/extension/1460/vitals/ https://github.com/corecoding/Vitals Lock Keys https://extensions.gnome.org/extension/36/lock-keys/ https://github.com/kazysmaster/gnome-shell-extension-lockkeys Switcher https://extensions.gnome.org/extension/973/switcher/ https://github.com/daniellandau/switcher Arc Menu https://extensions.gnome.org/extension/3628/arcmenu/ https://gitlab.com/arcmenu/ArcMenu Not tested yet: System Monitor Next https://extensions.gnome.org/extension/3010/system-monitor-next/ https://github.com/mgalgs/gnome-shell-system-monitor-applet Freon ??? is this up-to-date ??? https://extensions.gnome.org/extension/841/freon/ https://github.com/UshakovVasilii/gnome-shell-extension-freon Removable Drive Menu ??? is this working ??? https://extensions.gnome.org/extension/7/removable-drive-menu/ Smart Auto Move https://extensions.gnome.org/extension/4736/smart-auto-move/ https://github.com/khimaros/smart-auto-move Auto Move Windows ??? is this deprecated ??? https://extensions.gnome.org/extension/16/auto-move-windows/ https://gitlab.gnome.org/GNOME/gnome-shell-extensions Light Dict https://extensions.gnome.org/extension/2959/light-dict/ https://github.com/tuberry/light-dict Ubuntu 20.04 \u00b6 Warning Everything below is tested only for 20.04, do NOT install in 24.04. Todo Review entire section https://bazel.build/install/ubuntu curl -sS -L https://bazel.build/bazel-release.pub.gpg \\ | gpg --dearmor >/usr/share/keyrings/bazel-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] \\ https://storage.googleapis.com/bazel-apt stable jdk1.8\" \\ | sudo tee /etc/apt/sources.list.d/bazel.list sudo apt update sudo apt install -y bazel EXTENSIONS_TO_INSTALL =( gnome-tweaks gnome-shell-extensions ) EXTENSIONS_TO_INSTALL_AND_ENABLE =( gnome-shell-extension-dash-to-panel gnome-shell-extension-disconnect-wifi gnome-shell-extension-weather gnome-shell-extension-remove-dropdown-arrows gnome-shell-extension-system-monitor gnome-shell-extension-show-ip # gnome-shell-extensions-gpaste gnome-shell-extension-arc-menu ) EXTENSIONS_TO_ENABLE =( # from gnome-shell-extensions # Lets you reach an application using gnome 2.x style menu on the panel. #apps-menu \\ # Lets you manage your workspaces more easily, assigning a specific workspace to # each application as soon as it creates a window, in a manner configurable with a # GSettings key. auto-move-windows # Shows a status menu for rapid unmount and power off of external storage devices # (i.e. pendrives) drive-menu # Changes application icons to always launch a new instance when activated. #launch-new-instance \\ # An alternative algorithm for layouting the thumbnails in the windows overview, that # more closely reflects the actual positions and sizes. native-window-placement # Shows a status Indicator for navigating to Places. places-menu # Adds a shortcut for resizing the focus window to a size that is suitable for GNOME Software screenshots #screenshot-window-sizer \\ # Loads a shell theme from ~/.themes//gnome-shell. #user-theme \\ # Adds a bottom panel with a traditional window list. #window-list \\ # Allow keyboard selection of windows and workspaces in overlay mode. #windowsNavigator \\ # Adds a simple workspace switcher to the top bar. #workspace-indicator \\ ) for ext in ${ EXTENSIONS_TO_INSTALL [@] } ${ EXTENSIONS_TO_INSTALL_AND_ENABLE [@] } ; do sudo apt install -y --allow-downgrades \" ${ ext } \" done for ext in ${ EXTENSIONS_TO_INSTALL_AND_ENABLE [@] } ${ EXTENSIONS_TO_ENABLE [@] } ; do gnome-extensions enable \" ${ ext } \" done GNOME_EXTENSIONS_DIR = \" ${ HOME } /.local/share/gnome-shell/extensions\" mkdir -p \" ${ GNOME_EXTENSIONS_DIR } \" function get_uri_last_token_without_extension () { repo_url = ${ 1 } printf ${ repo_url } | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 } # alternate version which doesn't end in newline function get_uri_last_token_without_extension__alt () { repo_url = ${ 1 } last_token = ${ repo_url ##*/ } printf ${ last_token /%.*/ } } function install_gnome_extension_from_git_nested () { repo_url = ${ 1 } extension_key = ${ 2 } temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension ${ extension_key } } function install_gnome_extension_from_git_root () { repo_url = ${ 1 } extension_key = ${ 2 } rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" # not clear, though unlikely, if .git being in the install dir is a problem git clone \" ${ repo_url } \" \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" enable_gnome_extension \" ${ extension_key } \" } function enable_gnome_extension () { extension_key = ${ 1 } gnome-extensions enable \" ${ extension_key } \" } # TODO: description install_gnome_extension_from_git_nested \"https://github.com/petres/gnome-shell-extension-extensions.git\" \"extensions@abteil.org\" # TODO: description install_gnome_extension_from_git_nested \"https://github.com/kgshank/gse-sound-output-device-chooser.git\" \"sound-output-device-chooser@kgshank.net\" # TODO: description install_gnome_extension_from_git_nested \"https://github.com/kazysmaster/gnome-shell-extension-lockkeys.git\" \"lockkeys@vaina.lt\" # TODO: description install_gnome_extension_from_git_root \"https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator.git\" \"clipboard-indicator@tudmotu.com\" # TODO: description install_gnome_extension_from_git_root \"https://github.com/daniellandau/switcher.git\" \"switcher@landau.fi\" function install_gnome_shell_extension_freon () { repo_url = \"https://github.com/UshakovVasilii/gnome-shell-extension-freon.git\" extension_key = \"freon@UshakovVasilii_Github.yahoo.com\" temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" glib-compile-schemas \" ${ temp_repo_dir } / ${ extension_key } /schemas/\" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension \" ${ extension_key } \" } # TODO: description install_gnome_shell_extension_freon function install_gnome_shell_extension_gtile () { repo_url = \"https://github.com/gTile/gTile.git\" extension_key = \"gTile@vibou\" temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" bazel run :install-extension \" ${ temp_repo_dir } \" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension \" ${ extension_key } \" } # TODO: description install_gnome_shell_extension_gtile For the weather extension, see https://home.openweathermap.org/api_keys . Warning This causes some scaled windows to display as if unscaled. To use extensions right away, press Alt \uff0b F2 , R , Enter . Warning Supposedly this is the command line equivalent, avoid since it can crash the system: gnome-shell --replace To verify state of all extensions: gnome-extensions list | xargs -I {} gnome-extensions info {} Superseded \u00b6 Extensions that are no longer used in favor of a better alternative. Left as a backup and for reference. # TODO: description #curl -sS -L -O https://extensions.gnome.org/extension-data/world_clock_liteailin.nemui.v9.shell-extension.zip install_gnome_extension_from_git_root \"https://github.com/jwendell/gnome-shell-extension-timezone.git\" \"timezone@jwendell\" # set the path to people.json in the extension settings TIMEZONE_EXTENSION_DIR = \" ${ HOME } /.config/gnome-shell-extension-timezone\" mkdir -p \" $TIMEZONE_EXTENSION_DIR \" # include \"avatar\": \"<url>/avatar.jpg\" in the list of attributes below # or \"gravatar\" with email registered at gravatar.com or libravatar.org tee -a \" $TIMEZONE_EXTENSION_DIR /people.json\" > /dev/null <<EOF [ { \"name\": \"Jim\", \"city\": \"NYC\", \"tz\": \"America/New_York\" }, { \"name\": \"Hans\", \"city\": \"Berlin\", \"tz\": \"Europe/Berlin\" }, { \"name\": \"Chris\", \"city\": \"San Jose\", \"tz\": \"America/Los_Angeles\" }, { \"name\": \"Singh\", \"city\": \"Bangalore\", \"tz\": \"Asia/Kolkata\" } ] EOF Disabled in favor of gnome-shell-extension-system-monitor : REPO_URL = \"https://github.com/hedayaty/NetSpeed.git\" REPO_NAME = $( get_uri_last_token_without_extension ${ REPO_URL } ) git clone \" ${ REPO_URL } \" \"/tmp/ ${ REPO_NAME } \" cd \"/tmp/ ${ REPO_NAME } \" && make && make enable rm -rf \"/tmp/ ${ REPO_NAME } \" Not yet evaluated \u00b6 Todo Evaluate and decide to keep or discard. gnome-shell-extension-autohidetopbar gnome-shell-extension-bluetooth-quick-connect gnome-shell-extension-dashtodock gnome-shell-extension-easyscreencast gnome-shell-extension-gsconnect-browsers gnome-shell-extension-gsconnect gnome-shell-extension-hard-disk-led gnome-shell-extension-hide-activities gnome-shell-extension-hide-veth gnome-shell-extension-impatience gnome-shell-extension-kimpanel gnome-shell-extension-log-out-button gnome-shell-extension-move-clock gnome-shell-extension-multi-monitors gnome-shell-extension-no-annoyance gnome-shell-extension-onboard gnome-shell-extension-pixelsaver gnome-shell-extension-redshift gnome-shell-extension-shortcuts gnome-shell-extension-suspend-button gnome-shell-extension-tilix-dropdown gnome-shell-extension-tilix-shortcut gnome-shell-extension-top-icons-plus gnome-shell-extension-trash gnome-shell-extension-workspaces-to-dock gnome-shell-extension-appindicator gnome-shell-extension-caffeine gnome-shell-extension-desktop-icons gnome-shell-extension-draw-on-your-screen gnome-shell-extension-gamemode gnome-shell-extension-hijra gnome-shell-extension-prefs gnome-shell-extension-ubuntu-dock gnome-shell-extension-xrdesktop To get all the extensions in apt: apt search gnome-shell-extension --names-only | grep 'gnome.*\\w/\\w' | cut -d '/' -f1 !!! TODO: Enable NetSpeed.","title":"GNOME extensions"},{"location":"gnome_extensions/#gnome-extensions","text":"","title":"GNOME extensions"},{"location":"gnome_extensions/#ubuntu-2404","text":"Sadly, GNOME extensions are now to be installed via browser extension. Chrome is recommended, since Firefox is now installed via snap and has issues. Install the browser extension: https://chromewebstore.google.com/detail/gnome-shell-integration/gphhapmejobijbbhgpjhcjognlahblep Install the native host connector for the browser extension: https://gnome.pages.gitlab.gnome.org/gnome-browser-integration/pages/installation-guide.html sudo apt update sudo apt install -y gnome-browser-connector Install: Dash to Panel https://extensions.gnome.org/extension/1160/dash-to-panel/ https://github.com/home-sweet-gnome/dash-to-panel Extension List https://extensions.gnome.org/extension/3088/extension-list/ https://github.com/tuberry/extension-list Clipboard Indicator https://extensions.gnome.org/extension/779/clipboard-indicator/ https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator GTile https://extensions.gnome.org/extension/28/gtile/ https://github.com/gTile Top Hat https://extensions.gnome.org/extension/5219/tophat/ https://github.com/fflewddur/tophat Vitals https://extensions.gnome.org/extension/1460/vitals/ https://github.com/corecoding/Vitals Lock Keys https://extensions.gnome.org/extension/36/lock-keys/ https://github.com/kazysmaster/gnome-shell-extension-lockkeys Switcher https://extensions.gnome.org/extension/973/switcher/ https://github.com/daniellandau/switcher Arc Menu https://extensions.gnome.org/extension/3628/arcmenu/ https://gitlab.com/arcmenu/ArcMenu Not tested yet: System Monitor Next https://extensions.gnome.org/extension/3010/system-monitor-next/ https://github.com/mgalgs/gnome-shell-system-monitor-applet Freon ??? is this up-to-date ??? https://extensions.gnome.org/extension/841/freon/ https://github.com/UshakovVasilii/gnome-shell-extension-freon Removable Drive Menu ??? is this working ??? https://extensions.gnome.org/extension/7/removable-drive-menu/ Smart Auto Move https://extensions.gnome.org/extension/4736/smart-auto-move/ https://github.com/khimaros/smart-auto-move Auto Move Windows ??? is this deprecated ??? https://extensions.gnome.org/extension/16/auto-move-windows/ https://gitlab.gnome.org/GNOME/gnome-shell-extensions Light Dict https://extensions.gnome.org/extension/2959/light-dict/ https://github.com/tuberry/light-dict","title":"Ubuntu 24.04"},{"location":"gnome_extensions/#ubuntu-2004","text":"Warning Everything below is tested only for 20.04, do NOT install in 24.04. Todo Review entire section https://bazel.build/install/ubuntu curl -sS -L https://bazel.build/bazel-release.pub.gpg \\ | gpg --dearmor >/usr/share/keyrings/bazel-archive-keyring.gpg echo \\ \"deb [arch=amd64 signed-by=/usr/share/keyrings/bazel-archive-keyring.gpg] \\ https://storage.googleapis.com/bazel-apt stable jdk1.8\" \\ | sudo tee /etc/apt/sources.list.d/bazel.list sudo apt update sudo apt install -y bazel EXTENSIONS_TO_INSTALL =( gnome-tweaks gnome-shell-extensions ) EXTENSIONS_TO_INSTALL_AND_ENABLE =( gnome-shell-extension-dash-to-panel gnome-shell-extension-disconnect-wifi gnome-shell-extension-weather gnome-shell-extension-remove-dropdown-arrows gnome-shell-extension-system-monitor gnome-shell-extension-show-ip # gnome-shell-extensions-gpaste gnome-shell-extension-arc-menu ) EXTENSIONS_TO_ENABLE =( # from gnome-shell-extensions # Lets you reach an application using gnome 2.x style menu on the panel. #apps-menu \\ # Lets you manage your workspaces more easily, assigning a specific workspace to # each application as soon as it creates a window, in a manner configurable with a # GSettings key. auto-move-windows # Shows a status menu for rapid unmount and power off of external storage devices # (i.e. pendrives) drive-menu # Changes application icons to always launch a new instance when activated. #launch-new-instance \\ # An alternative algorithm for layouting the thumbnails in the windows overview, that # more closely reflects the actual positions and sizes. native-window-placement # Shows a status Indicator for navigating to Places. places-menu # Adds a shortcut for resizing the focus window to a size that is suitable for GNOME Software screenshots #screenshot-window-sizer \\ # Loads a shell theme from ~/.themes//gnome-shell. #user-theme \\ # Adds a bottom panel with a traditional window list. #window-list \\ # Allow keyboard selection of windows and workspaces in overlay mode. #windowsNavigator \\ # Adds a simple workspace switcher to the top bar. #workspace-indicator \\ ) for ext in ${ EXTENSIONS_TO_INSTALL [@] } ${ EXTENSIONS_TO_INSTALL_AND_ENABLE [@] } ; do sudo apt install -y --allow-downgrades \" ${ ext } \" done for ext in ${ EXTENSIONS_TO_INSTALL_AND_ENABLE [@] } ${ EXTENSIONS_TO_ENABLE [@] } ; do gnome-extensions enable \" ${ ext } \" done GNOME_EXTENSIONS_DIR = \" ${ HOME } /.local/share/gnome-shell/extensions\" mkdir -p \" ${ GNOME_EXTENSIONS_DIR } \" function get_uri_last_token_without_extension () { repo_url = ${ 1 } printf ${ repo_url } | rev | cut -d '/' -f 1 | rev | cut -d '.' -f 1 } # alternate version which doesn't end in newline function get_uri_last_token_without_extension__alt () { repo_url = ${ 1 } last_token = ${ repo_url ##*/ } printf ${ last_token /%.*/ } } function install_gnome_extension_from_git_nested () { repo_url = ${ 1 } extension_key = ${ 2 } temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension ${ extension_key } } function install_gnome_extension_from_git_root () { repo_url = ${ 1 } extension_key = ${ 2 } rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" # not clear, though unlikely, if .git being in the install dir is a problem git clone \" ${ repo_url } \" \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" enable_gnome_extension \" ${ extension_key } \" } function enable_gnome_extension () { extension_key = ${ 1 } gnome-extensions enable \" ${ extension_key } \" } # TODO: description install_gnome_extension_from_git_nested \"https://github.com/petres/gnome-shell-extension-extensions.git\" \"extensions@abteil.org\" # TODO: description install_gnome_extension_from_git_nested \"https://github.com/kgshank/gse-sound-output-device-chooser.git\" \"sound-output-device-chooser@kgshank.net\" # TODO: description install_gnome_extension_from_git_nested \"https://github.com/kazysmaster/gnome-shell-extension-lockkeys.git\" \"lockkeys@vaina.lt\" # TODO: description install_gnome_extension_from_git_root \"https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator.git\" \"clipboard-indicator@tudmotu.com\" # TODO: description install_gnome_extension_from_git_root \"https://github.com/daniellandau/switcher.git\" \"switcher@landau.fi\" function install_gnome_shell_extension_freon () { repo_url = \"https://github.com/UshakovVasilii/gnome-shell-extension-freon.git\" extension_key = \"freon@UshakovVasilii_Github.yahoo.com\" temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" glib-compile-schemas \" ${ temp_repo_dir } / ${ extension_key } /schemas/\" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension \" ${ extension_key } \" } # TODO: description install_gnome_shell_extension_freon function install_gnome_shell_extension_gtile () { repo_url = \"https://github.com/gTile/gTile.git\" extension_key = \"gTile@vibou\" temp_repo_dir = \" $( mktemp -d ) \" git clone \" ${ repo_url } \" \" ${ temp_repo_dir } \" bazel run :install-extension \" ${ temp_repo_dir } \" rm -v -rf \" ${ GNOME_EXTENSIONS_DIR } / ${ extension_key } \" cp -v -r \" ${ temp_repo_dir } / ${ extension_key } \" \" ${ GNOME_EXTENSIONS_DIR } \" rm -v -rf \" ${ temp_repo_dir } \" enable_gnome_extension \" ${ extension_key } \" } # TODO: description install_gnome_shell_extension_gtile For the weather extension, see https://home.openweathermap.org/api_keys . Warning This causes some scaled windows to display as if unscaled. To use extensions right away, press Alt \uff0b F2 , R , Enter . Warning Supposedly this is the command line equivalent, avoid since it can crash the system: gnome-shell --replace To verify state of all extensions: gnome-extensions list | xargs -I {} gnome-extensions info {}","title":"Ubuntu 20.04"},{"location":"gnome_extensions/#superseded","text":"Extensions that are no longer used in favor of a better alternative. Left as a backup and for reference. # TODO: description #curl -sS -L -O https://extensions.gnome.org/extension-data/world_clock_liteailin.nemui.v9.shell-extension.zip install_gnome_extension_from_git_root \"https://github.com/jwendell/gnome-shell-extension-timezone.git\" \"timezone@jwendell\" # set the path to people.json in the extension settings TIMEZONE_EXTENSION_DIR = \" ${ HOME } /.config/gnome-shell-extension-timezone\" mkdir -p \" $TIMEZONE_EXTENSION_DIR \" # include \"avatar\": \"<url>/avatar.jpg\" in the list of attributes below # or \"gravatar\" with email registered at gravatar.com or libravatar.org tee -a \" $TIMEZONE_EXTENSION_DIR /people.json\" > /dev/null <<EOF [ { \"name\": \"Jim\", \"city\": \"NYC\", \"tz\": \"America/New_York\" }, { \"name\": \"Hans\", \"city\": \"Berlin\", \"tz\": \"Europe/Berlin\" }, { \"name\": \"Chris\", \"city\": \"San Jose\", \"tz\": \"America/Los_Angeles\" }, { \"name\": \"Singh\", \"city\": \"Bangalore\", \"tz\": \"Asia/Kolkata\" } ] EOF Disabled in favor of gnome-shell-extension-system-monitor : REPO_URL = \"https://github.com/hedayaty/NetSpeed.git\" REPO_NAME = $( get_uri_last_token_without_extension ${ REPO_URL } ) git clone \" ${ REPO_URL } \" \"/tmp/ ${ REPO_NAME } \" cd \"/tmp/ ${ REPO_NAME } \" && make && make enable rm -rf \"/tmp/ ${ REPO_NAME } \"","title":"Superseded"},{"location":"gnome_extensions/#not-yet-evaluated","text":"Todo Evaluate and decide to keep or discard. gnome-shell-extension-autohidetopbar gnome-shell-extension-bluetooth-quick-connect gnome-shell-extension-dashtodock gnome-shell-extension-easyscreencast gnome-shell-extension-gsconnect-browsers gnome-shell-extension-gsconnect gnome-shell-extension-hard-disk-led gnome-shell-extension-hide-activities gnome-shell-extension-hide-veth gnome-shell-extension-impatience gnome-shell-extension-kimpanel gnome-shell-extension-log-out-button gnome-shell-extension-move-clock gnome-shell-extension-multi-monitors gnome-shell-extension-no-annoyance gnome-shell-extension-onboard gnome-shell-extension-pixelsaver gnome-shell-extension-redshift gnome-shell-extension-shortcuts gnome-shell-extension-suspend-button gnome-shell-extension-tilix-dropdown gnome-shell-extension-tilix-shortcut gnome-shell-extension-top-icons-plus gnome-shell-extension-trash gnome-shell-extension-workspaces-to-dock gnome-shell-extension-appindicator gnome-shell-extension-caffeine gnome-shell-extension-desktop-icons gnome-shell-extension-draw-on-your-screen gnome-shell-extension-gamemode gnome-shell-extension-hijra gnome-shell-extension-prefs gnome-shell-extension-ubuntu-dock gnome-shell-extension-xrdesktop To get all the extensions in apt: apt search gnome-shell-extension --names-only | grep 'gnome.*\\w/\\w' | cut -d '/' -f1 !!! TODO: Enable NetSpeed.","title":"Not yet evaluated"},{"location":"golang/","text":"Golang \u00b6 https://golang.org/doc/install https://www.digitalocean.com/community/tutorials/how-to-install-go-on-ubuntu-18-04 https://github.com/golang-standards/project-layout Warning If you aren\u2019t installing for the first time, remove the go install directory first: rm -rf \" ${ HOME } /.local/share/go\" GO_INSTALL_ROOT = \" ${ HOME } /.local/share\" GO_INSTALL_PATH = \" ${ GO_INSTALL_ROOT } /go\" GO_PROJECTS_ROOT = \" ${ HOME } /go\" mkdir -p \" ${ GO_INSTALL_PATH } \" \" ${ GO_PROJECTS_ROOT } \" GOLANG_VERSION = $( curl -sS -L \"https://golang.org/VERSION?m=text\" ) curl -sS -L \"https://storage.googleapis.com/golang/ ${ GOLANG_VERSION } .linux-amd64.tar.gz\" \\ | tar -zx --directory \" ${ GO_INSTALL_ROOT } \" # Add environment variables to shell startup for persistence tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Golang export GOPATH=\"${GO_INSTALL_PATH}\" export GOROOT=\"${GO_PROJECTS_ROOT}\" export PATH=\"\\${PATH}\":\"\\${GOROOT}/bin\":\"\\${GOPATH}/bin\" EOF To enable right away: source \" ${ HOME } /.zshrc\" To verify: go version","title":"Golang"},{"location":"golang/#golang","text":"https://golang.org/doc/install https://www.digitalocean.com/community/tutorials/how-to-install-go-on-ubuntu-18-04 https://github.com/golang-standards/project-layout Warning If you aren\u2019t installing for the first time, remove the go install directory first: rm -rf \" ${ HOME } /.local/share/go\" GO_INSTALL_ROOT = \" ${ HOME } /.local/share\" GO_INSTALL_PATH = \" ${ GO_INSTALL_ROOT } /go\" GO_PROJECTS_ROOT = \" ${ HOME } /go\" mkdir -p \" ${ GO_INSTALL_PATH } \" \" ${ GO_PROJECTS_ROOT } \" GOLANG_VERSION = $( curl -sS -L \"https://golang.org/VERSION?m=text\" ) curl -sS -L \"https://storage.googleapis.com/golang/ ${ GOLANG_VERSION } .linux-amd64.tar.gz\" \\ | tar -zx --directory \" ${ GO_INSTALL_ROOT } \" # Add environment variables to shell startup for persistence tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Golang export GOPATH=\"${GO_INSTALL_PATH}\" export GOROOT=\"${GO_PROJECTS_ROOT}\" export PATH=\"\\${PATH}\":\"\\${GOROOT}/bin\":\"\\${GOPATH}/bin\" EOF To enable right away: source \" ${ HOME } /.zshrc\" To verify: go version","title":"Golang"},{"location":"input_devices/","text":"Input devices \u00b6 Kinesis Advantage 360 \u00b6 Reference: https://kinesis-ergo.com/support/kb360/ https://kinesis-ergo.com/wp-content/uploads/Advantage360-SmartSet-KB360-Users-Manual-v10-12-22.pdf https://kinesis-ergo.com/wp-content/uploads/Adv360-SmartSet-Direct-Programming-Guide-v12-2-22.pdf https://kinesis-ergo.com/wp-content/uploads/Adv360-SmartSet-Direct-Programming-Action-Tokens-v3-31-23.pdf Steps: access the Direct Programming mode using the SmartSet + V-Drive keys place the custom configuration below in layouts/layout6.txt and save the file eject the drive and press the SmartSet + V-Drive keys if that fails and the keyboard isn\u2019t responsive, disconnect the keyboard cable and reconnect it <base> [hk1]>[prnt] {hk2}>{-lshf}{prnt}{+lshf} {hk3}>{x1}{keyt}{-rwin}{-lalt}{kp0}{+rwin}{+lalt} {hk4}>{x1}{keyt}{-rwin}{-lshf}{kp0}{+rwin}{+lshf} <keypad> <function1> [left]>[vol-] [rght]>[vol+] [rwin]>[lwin] {up}>{-rwin}{pgup}{+rwin} {down}>{-rwin}{pgdn}{+rwin} {lshf}{up}>{-rwin}{-lshf}{pgup}{+rwin}{+lshf} {lshf}{down}>{-rwin}{-lshf}{pgdn}{+rwin}{+lshf} <function2> <function3>","title":"Input devices"},{"location":"input_devices/#input-devices","text":"","title":"Input devices"},{"location":"input_devices/#kinesis-advantage-360","text":"Reference: https://kinesis-ergo.com/support/kb360/ https://kinesis-ergo.com/wp-content/uploads/Advantage360-SmartSet-KB360-Users-Manual-v10-12-22.pdf https://kinesis-ergo.com/wp-content/uploads/Adv360-SmartSet-Direct-Programming-Guide-v12-2-22.pdf https://kinesis-ergo.com/wp-content/uploads/Adv360-SmartSet-Direct-Programming-Action-Tokens-v3-31-23.pdf Steps: access the Direct Programming mode using the SmartSet + V-Drive keys place the custom configuration below in layouts/layout6.txt and save the file eject the drive and press the SmartSet + V-Drive keys if that fails and the keyboard isn\u2019t responsive, disconnect the keyboard cable and reconnect it <base> [hk1]>[prnt] {hk2}>{-lshf}{prnt}{+lshf} {hk3}>{x1}{keyt}{-rwin}{-lalt}{kp0}{+rwin}{+lalt} {hk4}>{x1}{keyt}{-rwin}{-lshf}{kp0}{+rwin}{+lshf} <keypad> <function1> [left]>[vol-] [rght]>[vol+] [rwin]>[lwin] {up}>{-rwin}{pgup}{+rwin} {down}>{-rwin}{pgdn}{+rwin} {lshf}{up}>{-rwin}{-lshf}{pgup}{+rwin}{+lshf} {lshf}{down}>{-rwin}{-lshf}{pgdn}{+rwin}{+lshf} <function2> <function3>","title":"Kinesis Advantage 360"},{"location":"js/","text":"Javascript \u00b6 NVM \u00b6 https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating NVM_TAG = $( curl -sS -L https://api.github.com/repos/nvm-sh/nvm/releases/latest \\ | grep 'tag_name' \\ | cut -d \\\" -f4 ) curl -sS -L -o- https://raw.githubusercontent.com/nvm-sh/nvm/ ${ NVM_TAG } /install.sh \\ | bash # to enable right away source \" ${ HOME } /.zshrc\" Node \u00b6 Todo Install. NPM and/or Yarn \u00b6 Install.","title":"Javascript"},{"location":"js/#javascript","text":"","title":"Javascript"},{"location":"js/#nvm","text":"https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating NVM_TAG = $( curl -sS -L https://api.github.com/repos/nvm-sh/nvm/releases/latest \\ | grep 'tag_name' \\ | cut -d \\\" -f4 ) curl -sS -L -o- https://raw.githubusercontent.com/nvm-sh/nvm/ ${ NVM_TAG } /install.sh \\ | bash # to enable right away source \" ${ HOME } /.zshrc\"","title":"NVM"},{"location":"js/#node","text":"Todo Install.","title":"Node"},{"location":"js/#npm-andor-yarn","text":"Install.","title":"NPM and/or Yarn"},{"location":"kubernetes-dev/","text":"Kuberentes for local development \u00b6 Kubectl \u00b6 https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management # add the official GPG key to the keyring and ensure it has the right permissions VERSION = 1 .30 KEY_FILE = /etc/apt/keyrings/kubernetes-apt-keyring.gpg curl -sS -L https://pkgs.k8s.io/core:/stable:/v ${ VERSION } /deb/Release.key \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources REPO_URL = https://pkgs.k8s.io/core:/stable:/v ${ VERSION } /deb/ LIST_NAME = kubernetes echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } /\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y kubectl Helm \u00b6 https://helm.sh/docs/intro/install/#from-apt-debianubuntu KEY_FILE = /usr/share/keyrings/helm.gpg curl https://baltocdn.com/helm/signing.asc \\ | sudo gpg --dearmor -o ${ KEY_FILE } ARCH = $( dpkg --print-architecture ) REPO_URL = https://baltocdn.com/helm/stable/debian/ LIST_NAME = helm-stable-debian echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } all main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y helm # configure helm repo add stable \"https://charts.helm.sh/stable\" helm repo add bitnami \"https://charts.bitnami.com/bitnami\" helm repo update KIND \u00b6 Kubernetes in Docker. A neat distribution relying solely on Docker, used for testing K8s itself. For when you kinda want the banana but without the gorilla and the whole jungle. Allows you to create and manage a single node K8s cluster on your machine without the pain of setting up kubeadm, kubelet & friends. https://kind.sigs.k8s.io/docs/user/quick-start/ curl -sS -L -o \"./kind\" \"https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\" chmod +x \"./kind\" mv \"./kind\" \" ${ HOME } /local/bin/kind\" Alternatively, if you have go installed: GO111MODULE = \"on\" go get \"sigs.k8s.io/kind@v0.10.0\"","title":"Kuberentes for local development"},{"location":"kubernetes-dev/#kuberentes-for-local-development","text":"","title":"Kuberentes for local development"},{"location":"kubernetes-dev/#kubectl","text":"https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-using-native-package-management # add the official GPG key to the keyring and ensure it has the right permissions VERSION = 1 .30 KEY_FILE = /etc/apt/keyrings/kubernetes-apt-keyring.gpg curl -sS -L https://pkgs.k8s.io/core:/stable:/v ${ VERSION } /deb/Release.key \\ | sudo gpg --dearmor -o ${ KEY_FILE } sudo chmod a+r ${ KEY_FILE } # add the repository to Apt sources REPO_URL = https://pkgs.k8s.io/core:/stable:/v ${ VERSION } /deb/ LIST_NAME = kubernetes echo \"deb [signed-by= ${ KEY_FILE } ] ${ REPO_URL } /\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y kubectl","title":"Kubectl"},{"location":"kubernetes-dev/#helm","text":"https://helm.sh/docs/intro/install/#from-apt-debianubuntu KEY_FILE = /usr/share/keyrings/helm.gpg curl https://baltocdn.com/helm/signing.asc \\ | sudo gpg --dearmor -o ${ KEY_FILE } ARCH = $( dpkg --print-architecture ) REPO_URL = https://baltocdn.com/helm/stable/debian/ LIST_NAME = helm-stable-debian echo \"deb [arch= ${ ARCH } signed-by= ${ KEY_FILE } ] ${ REPO_URL } all main\" \\ | sudo tee /etc/apt/sources.list.d/ ${ LIST_NAME } .list > /dev/null sudo apt update sudo apt install -y helm # configure helm repo add stable \"https://charts.helm.sh/stable\" helm repo add bitnami \"https://charts.bitnami.com/bitnami\" helm repo update","title":"Helm"},{"location":"kubernetes-dev/#kind","text":"Kubernetes in Docker. A neat distribution relying solely on Docker, used for testing K8s itself. For when you kinda want the banana but without the gorilla and the whole jungle. Allows you to create and manage a single node K8s cluster on your machine without the pain of setting up kubeadm, kubelet & friends. https://kind.sigs.k8s.io/docs/user/quick-start/ curl -sS -L -o \"./kind\" \"https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\" chmod +x \"./kind\" mv \"./kind\" \" ${ HOME } /local/bin/kind\" Alternatively, if you have go installed: GO111MODULE = \"on\" go get \"sigs.k8s.io/kind@v0.10.0\"","title":"KIND"},{"location":"kubernetes-server/","text":"Kuberentes Server Setup on bare metal \u00b6 Warning Kubernetes may cause: headaches, fits of rage, binge eating, back pain and container orchestration. Warning Stop here. Continue only if you want to deploy full-fledged Kubernetes locally. Kuberentes itself, i.e. kubeadm, kubelet and friends \u00b6 Hint Disk diagnostics # find root partition drive df / -BG sudo lshw -short -C disk # check if drive is individual or raid cat /proc/scsi/scsi # check if your drive is HDD (1) or SDD (0) # if physical cat /sys/block/sda/queue/rotational lsblk -o NAME,TYPE,FSTYPE,SIZE,VENDOR,REV,ROTA lsblk -St # if virtual cat /sys/block/vda/queue/rotational # disable swap sudo swapoff -a sudo systemctl enable docker sudo apt install -y kubeadm kubelet # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ # verify connectivity to the gcr.io container image registry sudo kubeadm config images pull # start cluster sudo kubeadm init \\ --pod-network-cidr = 10 .244.0.0/16 # --control-plane-endpoint=DNS-name # add config to user mkdir -p \" ${ HOME } /.kube\" sudo cp -i \"/etc/kubernetes/admin.conf\" \" ${ HOME } /.kube/config\" sudo chown $( id -u ) : $( id -g ) \" ${ HOME } /.kube/config\" # install CNI plugin kubectl apply -f \"https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\" # disable control plane taint to allow pod creation on control plane sudo kubectl taint nodes --all node-role.kubernetes.io/master- # join machine as worker node #sudo kubeadm join 172.31.192.5:6443 \\ # --token k937r8.s6ilx972bxk4nwd7 \\ # --discovery-token-ca-cert-hash sha256:d643272866e4c8175f958cd44afb3629cdc7902eec0b95d250fd7c014e0f82f3 kubeadm token create --print-join-command SYS_CONFIG_DIR = \" ${ HOME } /.kube/install/system\" md \" ${ SYS_CONFIG_DIR } \" # # local volumes do not support dynamic provisioning # # we need to wait until the feature is implemented # # https://kubernetes.io/blog/2019/04/04/kubernetes-1.14-local-persistent-volumes-ga/ # # https://kubernetes.io/docs/concepts/storage/#local # tee \"${HOME}/.kube/storageclass-k8s-local.yaml\" >/dev/null <<EOF # apiVersion: storage.k8s.io/v1 # kind: StorageClass # metadata: # name: local-storage # annotations: # storageclass.kubernetes.io/is-default-class: \"true\" # provisioner: kubernetes.io/no-provisioner # volumeBindingMode: WaitForFirstConsumer # allowVolumeExpansion: true # reclaimPolicy: Delete # EOF # https://github.com/openebs/openebs # https://docs.openebs.io/docs/next/prerequisites.html#ubuntu systemctl status iscsid # if not installed: # sudo apt-get install open-iscsi # if not started: sudo systemctl enable iscsid && sudo systemctl start iscsid # deploy openebs in cluster kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml # https://docs.openebs.io/docs/next/localpv.html # verify hostpath and device are added kubectl get storageclass # list items indentation was necesary, unlike in original instructions tee \" ${ SYS_CONFIG_DIR } /storageclass-openebs-local.yaml\" >/dev/null <<EOF apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: openebs-hostpath annotations: openebs.io/cas-type: local cas.openebs.io/config: | - name: StorageType value: \"hostpath\" - name: BasePath value: \"/var/openebs/local/\" storageclass.kubernetes.io/is-default-class: \"true\" provisioner: openebs.io/local volumeBindingMode: WaitForFirstConsumer reclaimPolicy: Delete EOF # load openebs local storageclass kubectl apply -f \" ${ SYS_CONFIG_DIR } /storageclass-openebs-local.yaml\" # verify hostpath is now default kubectl get storageclass # https://metallb.universe.tf/installation/ # install metallb kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/namespace.yaml kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/metallb.yaml # On first install only kubectl create secret generic -n metallb-system memberlist --from-literal = secretkey = \" $( openssl rand -base64 128 ) \" # configure metallb CONFIGMAP_METALLB = \" ${ SYS_CONFIG_DIR } /configmap-metallb.yaml\" curl https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/example-layer2-config.yaml \\ -sL -o \" ${ CONFIGMAP_METALLB } \" # replace default address space with the real one sed -i 's| - 192.*| - 172.31.195.224/28|' \" ${ CONFIGMAP_METALLB } \" kubectl apply -f \" ${ CONFIGMAP_METALLB } \" Istio \u00b6 https://istio.io/docs/setup/getting-started/ # install istioctl system-wide in /opt with root ownership curl -L https://istio.io/downloadIstio | sh - ISTIO_DIR = $( echo istio-* ) find \" ${ ISTIO_DIR } \" -type d -exec chmod +x {} \\; sudo chown -R root:root \" ${ ISTIO_DIR } \" sudo mv \" ${ ISTIO_DIR } \" \"/opt\" sudo ln \"/opt/ ${ ISTIO_DIR } /bin/istioctl\" \"/usr/local/bin\" # install istio in k8s cluster istioctl manifest apply \\ --set addonComponents.grafana.enabled = true \\ --set addonComponents.kiali.enabled = true \\ --set values.gateways.istio-ingressgateway.type = NodePort # verify installation istioctl manifest apply \\ --set addonComponents.grafana.enabled = true \\ --set addonComponents.kiali.enabled = true \\ --set values.gateways.istio-ingressgateway.type = NodePort \\ > \" ${ SYS_CONFIG_DIR } /istio-generated-manifest.yaml\" istioctl verify-install -f \" ${ SYS_CONFIG_DIR } /istio-generated-manifest.yaml\" # set utility env variables (current shell only) export INGRESS_HOST = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.status.loadBalancer.ingress[0].ip}' ) export INGRESS_PORT = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.spec.ports[?(@.name==\"http2\")].port}' ) export SECURE_INGRESS_PORT = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.spec.ports[?(@.name==\"https\")].port}' ) # enable NodePort if previously using LoadBalancer istioctl upgrade --set values.gateways.istio-ingressgateway.type = NodePort","title":"Kuberentes Server Setup on bare metal"},{"location":"kubernetes-server/#kuberentes-server-setup-on-bare-metal","text":"Warning Kubernetes may cause: headaches, fits of rage, binge eating, back pain and container orchestration. Warning Stop here. Continue only if you want to deploy full-fledged Kubernetes locally.","title":"Kuberentes Server Setup on bare metal"},{"location":"kubernetes-server/#kuberentes-itself-ie-kubeadm-kubelet-and-friends","text":"Hint Disk diagnostics # find root partition drive df / -BG sudo lshw -short -C disk # check if drive is individual or raid cat /proc/scsi/scsi # check if your drive is HDD (1) or SDD (0) # if physical cat /sys/block/sda/queue/rotational lsblk -o NAME,TYPE,FSTYPE,SIZE,VENDOR,REV,ROTA lsblk -St # if virtual cat /sys/block/vda/queue/rotational # disable swap sudo swapoff -a sudo systemctl enable docker sudo apt install -y kubeadm kubelet # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/ # verify connectivity to the gcr.io container image registry sudo kubeadm config images pull # start cluster sudo kubeadm init \\ --pod-network-cidr = 10 .244.0.0/16 # --control-plane-endpoint=DNS-name # add config to user mkdir -p \" ${ HOME } /.kube\" sudo cp -i \"/etc/kubernetes/admin.conf\" \" ${ HOME } /.kube/config\" sudo chown $( id -u ) : $( id -g ) \" ${ HOME } /.kube/config\" # install CNI plugin kubectl apply -f \"https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\" # disable control plane taint to allow pod creation on control plane sudo kubectl taint nodes --all node-role.kubernetes.io/master- # join machine as worker node #sudo kubeadm join 172.31.192.5:6443 \\ # --token k937r8.s6ilx972bxk4nwd7 \\ # --discovery-token-ca-cert-hash sha256:d643272866e4c8175f958cd44afb3629cdc7902eec0b95d250fd7c014e0f82f3 kubeadm token create --print-join-command SYS_CONFIG_DIR = \" ${ HOME } /.kube/install/system\" md \" ${ SYS_CONFIG_DIR } \" # # local volumes do not support dynamic provisioning # # we need to wait until the feature is implemented # # https://kubernetes.io/blog/2019/04/04/kubernetes-1.14-local-persistent-volumes-ga/ # # https://kubernetes.io/docs/concepts/storage/#local # tee \"${HOME}/.kube/storageclass-k8s-local.yaml\" >/dev/null <<EOF # apiVersion: storage.k8s.io/v1 # kind: StorageClass # metadata: # name: local-storage # annotations: # storageclass.kubernetes.io/is-default-class: \"true\" # provisioner: kubernetes.io/no-provisioner # volumeBindingMode: WaitForFirstConsumer # allowVolumeExpansion: true # reclaimPolicy: Delete # EOF # https://github.com/openebs/openebs # https://docs.openebs.io/docs/next/prerequisites.html#ubuntu systemctl status iscsid # if not installed: # sudo apt-get install open-iscsi # if not started: sudo systemctl enable iscsid && sudo systemctl start iscsid # deploy openebs in cluster kubectl apply -f https://openebs.github.io/charts/openebs-operator.yaml # https://docs.openebs.io/docs/next/localpv.html # verify hostpath and device are added kubectl get storageclass # list items indentation was necesary, unlike in original instructions tee \" ${ SYS_CONFIG_DIR } /storageclass-openebs-local.yaml\" >/dev/null <<EOF apiVersion: storage.k8s.io/v1 kind: StorageClass metadata: name: openebs-hostpath annotations: openebs.io/cas-type: local cas.openebs.io/config: | - name: StorageType value: \"hostpath\" - name: BasePath value: \"/var/openebs/local/\" storageclass.kubernetes.io/is-default-class: \"true\" provisioner: openebs.io/local volumeBindingMode: WaitForFirstConsumer reclaimPolicy: Delete EOF # load openebs local storageclass kubectl apply -f \" ${ SYS_CONFIG_DIR } /storageclass-openebs-local.yaml\" # verify hostpath is now default kubectl get storageclass # https://metallb.universe.tf/installation/ # install metallb kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/namespace.yaml kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/metallb.yaml # On first install only kubectl create secret generic -n metallb-system memberlist --from-literal = secretkey = \" $( openssl rand -base64 128 ) \" # configure metallb CONFIGMAP_METALLB = \" ${ SYS_CONFIG_DIR } /configmap-metallb.yaml\" curl https://raw.githubusercontent.com/google/metallb/v0.9.3/manifests/example-layer2-config.yaml \\ -sL -o \" ${ CONFIGMAP_METALLB } \" # replace default address space with the real one sed -i 's| - 192.*| - 172.31.195.224/28|' \" ${ CONFIGMAP_METALLB } \" kubectl apply -f \" ${ CONFIGMAP_METALLB } \"","title":"Kuberentes itself, i.e. kubeadm, kubelet and friends"},{"location":"kubernetes-server/#istio","text":"https://istio.io/docs/setup/getting-started/ # install istioctl system-wide in /opt with root ownership curl -L https://istio.io/downloadIstio | sh - ISTIO_DIR = $( echo istio-* ) find \" ${ ISTIO_DIR } \" -type d -exec chmod +x {} \\; sudo chown -R root:root \" ${ ISTIO_DIR } \" sudo mv \" ${ ISTIO_DIR } \" \"/opt\" sudo ln \"/opt/ ${ ISTIO_DIR } /bin/istioctl\" \"/usr/local/bin\" # install istio in k8s cluster istioctl manifest apply \\ --set addonComponents.grafana.enabled = true \\ --set addonComponents.kiali.enabled = true \\ --set values.gateways.istio-ingressgateway.type = NodePort # verify installation istioctl manifest apply \\ --set addonComponents.grafana.enabled = true \\ --set addonComponents.kiali.enabled = true \\ --set values.gateways.istio-ingressgateway.type = NodePort \\ > \" ${ SYS_CONFIG_DIR } /istio-generated-manifest.yaml\" istioctl verify-install -f \" ${ SYS_CONFIG_DIR } /istio-generated-manifest.yaml\" # set utility env variables (current shell only) export INGRESS_HOST = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.status.loadBalancer.ingress[0].ip}' ) export INGRESS_PORT = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.spec.ports[?(@.name==\"http2\")].port}' ) export SECURE_INGRESS_PORT = $( kubectl -n istio-system get service istio-ingressgateway -o jsonpath = '{.spec.ports[?(@.name==\"https\")].port}' ) # enable NodePort if previously using LoadBalancer istioctl upgrade --set values.gateways.istio-ingressgateway.type = NodePort","title":"Istio"},{"location":"locale/","text":"Locale \u00b6 Warning Work in progress. Todo Implement. Make settings stick after reboot. Test. Attempt 1 \u00b6 To generate uniform locale settings: export LANGUAGE = en_US.UTF-8 export LANG = en_US.UTF-8 export LC_ALL = en_US.UTF-8 locale-gen en_US.UTF-8 To configure dpkg: dpkg-reconfigure locales Attempt 2 \u00b6 sudo tee \"/etc/default/locale\" >/dev/null <<EOF LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_CTYPE=\"en_US.UTF-8\" LC_NUMERIC=\"en_US.UTF-8\" LC_TIME=\"en_US.UTF-8\" LC_COLLATE=\"en_US.UTF-8\" LC_MONETARY=\"en_US.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" LC_PAPER=\"en_US.UTF-8\" LC_NAME=\"en_US.UTF-8\" LC_ADDRESS=\"en_US.UTF-8\" LC_TELEPHONE=\"en_US.UTF-8\" LC_MEASUREMENT=\"en_US.UTF-8\" LC_IDENTIFICATION=\"en_US.UTF-8\" LC_ALL=en_US.UTF-8 EOF","title":"Locale"},{"location":"locale/#locale","text":"Warning Work in progress. Todo Implement. Make settings stick after reboot. Test.","title":"Locale"},{"location":"locale/#attempt-1","text":"To generate uniform locale settings: export LANGUAGE = en_US.UTF-8 export LANG = en_US.UTF-8 export LC_ALL = en_US.UTF-8 locale-gen en_US.UTF-8 To configure dpkg: dpkg-reconfigure locales","title":"Attempt 1"},{"location":"locale/#attempt-2","text":"sudo tee \"/etc/default/locale\" >/dev/null <<EOF LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_CTYPE=\"en_US.UTF-8\" LC_NUMERIC=\"en_US.UTF-8\" LC_TIME=\"en_US.UTF-8\" LC_COLLATE=\"en_US.UTF-8\" LC_MONETARY=\"en_US.UTF-8\" LC_MESSAGES=\"en_US.UTF-8\" LC_PAPER=\"en_US.UTF-8\" LC_NAME=\"en_US.UTF-8\" LC_ADDRESS=\"en_US.UTF-8\" LC_TELEPHONE=\"en_US.UTF-8\" LC_MEASUREMENT=\"en_US.UTF-8\" LC_IDENTIFICATION=\"en_US.UTF-8\" LC_ALL=en_US.UTF-8 EOF","title":"Attempt 2"},{"location":"networking/","text":"Networking \u00b6 Disable IPv6 \u00b6 sudo tee \"/etc/sysctl.d/local-disable-ipv6.conf\" >/dev/null <<EOF net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6=1 EOF # reload configs sudo service procps force-reload # verify netplan status Set up DNS with Cloudflare, Google, Quad \u00b6 Warning Not working properly. Todo Get more context and arrive at a working AND permanent solution. https://wiki.archlinux.org/title/systemd-resolved https://man7.org/linux/man-pages/man5/resolved.conf.d.5.html sudo mkdir -p /etc/systemd/resolved.conf.d sudo tee \"/etc/systemd/resolved.conf.d/99-dns.conf\" >/dev/null <<EOF [Resolve] DNS=1.1.1.1 1.0.0.1 FallbackDNS=8.8.8.8 8.8.4.4 9.9.9.9 # to prevent systemd-resolved from using the per-link DNS servers, if any of them set Domains=~. in the per-link configuration Domains=~. EOF # reload configs sudo service systemd-resolved restart # verify resolvectl status netplan status # set DNS via netplan # currently disabled as we use systemd-resolved instead #MAIN_INTERFACE=$(ip route get 8.8.8.8 | awk -- '{printf $5}') #sudo netplan get network.ethernets.${MAIN_INTERFACE} #set DNS for main interface #sudo netplan set network.ethernets.${MAIN_INTERFACE}.nameservers.addresses=[1.1.1.1, 1.0.0.1]","title":"Networking"},{"location":"networking/#networking","text":"","title":"Networking"},{"location":"networking/#disable-ipv6","text":"sudo tee \"/etc/sysctl.d/local-disable-ipv6.conf\" >/dev/null <<EOF net.ipv6.conf.all.disable_ipv6=1 net.ipv6.conf.default.disable_ipv6=1 EOF # reload configs sudo service procps force-reload # verify netplan status","title":"Disable IPv6"},{"location":"networking/#set-up-dns-with-cloudflare-google-quad","text":"Warning Not working properly. Todo Get more context and arrive at a working AND permanent solution. https://wiki.archlinux.org/title/systemd-resolved https://man7.org/linux/man-pages/man5/resolved.conf.d.5.html sudo mkdir -p /etc/systemd/resolved.conf.d sudo tee \"/etc/systemd/resolved.conf.d/99-dns.conf\" >/dev/null <<EOF [Resolve] DNS=1.1.1.1 1.0.0.1 FallbackDNS=8.8.8.8 8.8.4.4 9.9.9.9 # to prevent systemd-resolved from using the per-link DNS servers, if any of them set Domains=~. in the per-link configuration Domains=~. EOF # reload configs sudo service systemd-resolved restart # verify resolvectl status netplan status # set DNS via netplan # currently disabled as we use systemd-resolved instead #MAIN_INTERFACE=$(ip route get 8.8.8.8 | awk -- '{printf $5}') #sudo netplan get network.ethernets.${MAIN_INTERFACE} #set DNS for main interface #sudo netplan set network.ethernets.${MAIN_INTERFACE}.nameservers.addresses=[1.1.1.1, 1.0.0.1]","title":"Set up DNS with Cloudflare, Google, Quad"},{"location":"python/","text":"Python \u00b6 pip configuration \u00b6 If you\u2019re using a private pypi server, assign its URL to PIP_INTERNAL_INDEX_URL and uncomment the index-url lines. If using and/or building wheels, uncomment the [wheel] section. PIP_INTERNAL_INDEX_URL = mkdir -p \" ${ HOME } /.config/pip\" tee -a \" ${ HOME } /.config/pip/pip.conf\" >/dev/null <<EOF [global] # index-url = ${PIP_INTERNAL_INDEX_URL} # extra-index-url = https://pypi.org/simple no-cache-dir = true disable-pip-version-check = true [install] progress-bar = off # [wheel] # wheel-dir = /tmp/wheelhouse # find-links = /tmp/wheelhouse EOF pyenv \u00b6 pyenv handles Python version and virtual environment management. https://github.com/pyenv/pyenv-installer?tab=readme-ov-file#installation--update--uninstallation curl -sS -L \"https://pyenv.run\" | bash ln -s \" ${ HOME } /.pyenv/bin/pyenv\" \" ${ HOME } /.local/bin/pyenv\" tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # pyenv eval \"\\$(pyenv init -)\" eval \"\\$(pyenv virtualenv-init -)\" EOF # to enable right away source \" ${ HOME } /.zshrc\" To update pyenv , run: pyenv update Install Python via pyenv in user home, create and set a global virtual environment to avoid polluting the system Python: Todo Read version from prompt. PYENV_VENV_VERSION = \"3.11.9\" pyenv install \" ${ PYENV_VENV_VERSION } \" pyenv virtualenv \" ${ PYENV_VENV_VERSION } \" \"global- ${ PYENV_VENV_VERSION //. } \" pyenv global \"global- ${ PYENV_VENV_VERSION //. } \" pipx \u00b6 pipx enables running Python tools from isolated environments. https://github.com/pypa/pipx?tab=readme-ov-file#install-pipx Warning This assumes you have the global pyenv virtualenv indicated above active. \" $( pyenv which python ) \" -m pip install --upgrade pipx ln -s \" $( pyenv which pipx ) \" \" ${ HOME } /.local/bin/pipx\" tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # pipx argcomplete_dir=\"$(pyenv root)/versions/$(pyenv whence register-python-argcomplete | head -n1)/bin/\" eval \"$(${argcomplete_dir}/register-python-argcomplete pipx)\" EOF Poetry \u00b6 poetry handles package dependency management. https://python-poetry.org/docs/#installing-with-pipx https://python-poetry.org/docs/#zsh pipx install poetry # Add plugin to Oh-My-Zsh # The poetry docs mention using $ZSH_CUSTOM instead of $ZSH, however the $ZSH-based path contains poetry.plugin.zsh poetry completions zsh > \" ${ ZSH } /plugins/poetry/_poetry\" # configure poetry to not create virtual envs, we handle those with pyenv poetry config virtualenvs.create false poetry config virtualenvs.in-project true Todo Make this commented out in the original zsh setup, use sed to uncomment here. Enable plugin in ~/.zshrc plugins if not already previously performed: plugins ( poetry ... ) Todo Solve this deprecation issue: Warning: poetry-plugin-export will not be installed by default in a future version of Poetry. In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin. To disable this warning run 'poetry config warnings.export false' . System-wide tools \u00b6 invoke and dotenv \u00b6 invoke is a Python-based alternative to make focused on task management. dotenv is used together with invoke for .env file local dev workflows. https://github.com/pyinvoke/invoke https://github.com/theskumar/python-dotenv We install dotenv side-by-side so that the invoke -run tasks.py can import dotenv and read .env files. Todo solve issues forcing versions lower than 2 to avoid compatibilty issues pipx install invoke == 1 .7.3 pipx inject --include-apps invoke 'python-dotenv[cli]' twine \u00b6 Twine is a utility for publishing Python packages on PyPI. https://twine.readthedocs.io/en/stable/#installation pipx install twine Todo See how to use keyring to publish to PyPI. Nox \u00b6 Warning Optional. Todo See if we want this in the project env, the same as pytest. Nox automates testing in multiple Python environments. https://github.com/theacodes/nox pipx install nox mkdocs including material theme \u00b6 Warning Optional. Todo See if we want this in the project env. mkdocs generates and serves documentation sites based on markdown files. pipx install mkdocs-material --include-deps yamllint \u00b6 pipx install yamllint Nuitka \u00b6 Warning Optional. Warning Experimental. Todo Intall via pyenv and pipx. Todo test python -m nuitka --module invoke --include-package = invoke","title":"Python"},{"location":"python/#python","text":"","title":"Python"},{"location":"python/#pip-configuration","text":"If you\u2019re using a private pypi server, assign its URL to PIP_INTERNAL_INDEX_URL and uncomment the index-url lines. If using and/or building wheels, uncomment the [wheel] section. PIP_INTERNAL_INDEX_URL = mkdir -p \" ${ HOME } /.config/pip\" tee -a \" ${ HOME } /.config/pip/pip.conf\" >/dev/null <<EOF [global] # index-url = ${PIP_INTERNAL_INDEX_URL} # extra-index-url = https://pypi.org/simple no-cache-dir = true disable-pip-version-check = true [install] progress-bar = off # [wheel] # wheel-dir = /tmp/wheelhouse # find-links = /tmp/wheelhouse EOF","title":"pip configuration"},{"location":"python/#pyenv","text":"pyenv handles Python version and virtual environment management. https://github.com/pyenv/pyenv-installer?tab=readme-ov-file#installation--update--uninstallation curl -sS -L \"https://pyenv.run\" | bash ln -s \" ${ HOME } /.pyenv/bin/pyenv\" \" ${ HOME } /.local/bin/pyenv\" tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # pyenv eval \"\\$(pyenv init -)\" eval \"\\$(pyenv virtualenv-init -)\" EOF # to enable right away source \" ${ HOME } /.zshrc\" To update pyenv , run: pyenv update Install Python via pyenv in user home, create and set a global virtual environment to avoid polluting the system Python: Todo Read version from prompt. PYENV_VENV_VERSION = \"3.11.9\" pyenv install \" ${ PYENV_VENV_VERSION } \" pyenv virtualenv \" ${ PYENV_VENV_VERSION } \" \"global- ${ PYENV_VENV_VERSION //. } \" pyenv global \"global- ${ PYENV_VENV_VERSION //. } \"","title":"pyenv"},{"location":"python/#pipx","text":"pipx enables running Python tools from isolated environments. https://github.com/pypa/pipx?tab=readme-ov-file#install-pipx Warning This assumes you have the global pyenv virtualenv indicated above active. \" $( pyenv which python ) \" -m pip install --upgrade pipx ln -s \" $( pyenv which pipx ) \" \" ${ HOME } /.local/bin/pipx\" tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # pipx argcomplete_dir=\"$(pyenv root)/versions/$(pyenv whence register-python-argcomplete | head -n1)/bin/\" eval \"$(${argcomplete_dir}/register-python-argcomplete pipx)\" EOF","title":"pipx"},{"location":"python/#poetry","text":"poetry handles package dependency management. https://python-poetry.org/docs/#installing-with-pipx https://python-poetry.org/docs/#zsh pipx install poetry # Add plugin to Oh-My-Zsh # The poetry docs mention using $ZSH_CUSTOM instead of $ZSH, however the $ZSH-based path contains poetry.plugin.zsh poetry completions zsh > \" ${ ZSH } /plugins/poetry/_poetry\" # configure poetry to not create virtual envs, we handle those with pyenv poetry config virtualenvs.create false poetry config virtualenvs.in-project true Todo Make this commented out in the original zsh setup, use sed to uncomment here. Enable plugin in ~/.zshrc plugins if not already previously performed: plugins ( poetry ... ) Todo Solve this deprecation issue: Warning: poetry-plugin-export will not be installed by default in a future version of Poetry. In order to avoid a breaking change and make your automation forward-compatible, please install poetry-plugin-export explicitly. See https://python-poetry.org/docs/plugins/#using-plugins for details on how to install a plugin. To disable this warning run 'poetry config warnings.export false' .","title":"Poetry"},{"location":"python/#system-wide-tools","text":"","title":"System-wide tools"},{"location":"python/#invoke-and-dotenv","text":"invoke is a Python-based alternative to make focused on task management. dotenv is used together with invoke for .env file local dev workflows. https://github.com/pyinvoke/invoke https://github.com/theskumar/python-dotenv We install dotenv side-by-side so that the invoke -run tasks.py can import dotenv and read .env files. Todo solve issues forcing versions lower than 2 to avoid compatibilty issues pipx install invoke == 1 .7.3 pipx inject --include-apps invoke 'python-dotenv[cli]'","title":"invoke and dotenv"},{"location":"python/#twine","text":"Twine is a utility for publishing Python packages on PyPI. https://twine.readthedocs.io/en/stable/#installation pipx install twine Todo See how to use keyring to publish to PyPI.","title":"twine"},{"location":"python/#nox","text":"Warning Optional. Todo See if we want this in the project env, the same as pytest. Nox automates testing in multiple Python environments. https://github.com/theacodes/nox pipx install nox","title":"Nox"},{"location":"python/#mkdocs-including-material-theme","text":"Warning Optional. Todo See if we want this in the project env. mkdocs generates and serves documentation sites based on markdown files. pipx install mkdocs-material --include-deps","title":"mkdocs including material theme"},{"location":"python/#yamllint","text":"pipx install yamllint","title":"yamllint"},{"location":"python/#nuitka","text":"Warning Optional. Warning Experimental. Todo Intall via pyenv and pipx. Todo test python -m nuitka --module invoke --include-package = invoke","title":"Nuitka"},{"location":"shortcuts/","text":"Shortcuts \u00b6 https://askubuntu.com/questions/597395/how-to-set-custom-keyboard-shortcuts-from-terminal # this is consistent with Ubuntu's default screenshot location flamehost_output_path = ${ HOME } /Pictures/Screenshots mkdir -p ${ flamehost_output_path } # Array containing custom shortcut details: name, command, binding shortcuts =( # Examples #\"Open Terminal\" \"gnome-terminal\" \"<Control><Alt>T\" #\"Open File Manager\" \"nautilus\" \"<Control><Alt>E\" # Add more shortcuts here # we don't override Ubuntu's Print, <Alt>Print, and <Shift>Print # especially <Alt>Print for active windows, which flameshot is missing \"Flameshot - Capture current screen to file\" \"flameshot screen --path ${ flamehost_output_path } \" \"<Control><Shift>Print\" #\"Flameshot - Capture all screens to file\" # \"flameshot full --path ${flamehost_output_path}\" # \"<Control><Super><Shift>Print\" #\"Flameshot - Capture region without GUI to file and clipboard\" # \"flameshot gui --accept-on-select --clipboard --path ${flamehost_output_path}\" # \"<Control>Print\" \"Flameshot - Capture region with GUI to file and clipboard\" \"flameshot gui --clipboard --path ${ flamehost_output_path } \" \"<Control>Print\" ) # Function to create a custom keyboard shortcut base_module = \"org.gnome.settings-daemon.plugins.media-keys\" module = \" ${ base_module } .custom-keybinding\" create_custom_shortcut () { local index = \" $1 \" local name = \" $2 \" local command = \" $3 \" local binding = \" $4 \" loc = \"/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom ${ index } /\" # Add the custom shortcut to the list existing_bindings = $( gsettings get ${ base_module } custom-keybindings ) if [[ \" ${ existing_bindings } \" == \"@as []\" ]] ; then new_bindings = \"[' ${ loc } ']\" else new_bindings = \" ${ existing_bindings : :- 1 } , ' ${ loc } ']\" fi gsettings set ${ base_module } custom-keybindings \" ${ new_bindings } \" # Define the custom shortcut details gsettings set \" ${ module } : ${ loc } \" name \" ${ name } \" gsettings set \" ${ module } : ${ loc } \" command \" ${ command } \" gsettings set \" ${ module } : ${ loc } \" binding \" ${ binding } \" } # Loop through the shortcuts array index = 1 while [ $index -lt ${# shortcuts [@] } ] ; do shortcut_name = \" ${ shortcuts [ $index ] } \" shortcut_command = \" ${ shortcuts [ $(( index + 1 )) ] } \" shortcut_binding = \" ${ shortcuts [ $(( index + 2 )) ] } \" create_custom_shortcut \\ $(( index / 3 )) \\ \" ${ shortcut_name } \" \\ \" ${ shortcut_command } \" \\ \" ${ shortcut_binding } \" index = $(( index + 3 )) done","title":"Shortcuts"},{"location":"shortcuts/#shortcuts","text":"https://askubuntu.com/questions/597395/how-to-set-custom-keyboard-shortcuts-from-terminal # this is consistent with Ubuntu's default screenshot location flamehost_output_path = ${ HOME } /Pictures/Screenshots mkdir -p ${ flamehost_output_path } # Array containing custom shortcut details: name, command, binding shortcuts =( # Examples #\"Open Terminal\" \"gnome-terminal\" \"<Control><Alt>T\" #\"Open File Manager\" \"nautilus\" \"<Control><Alt>E\" # Add more shortcuts here # we don't override Ubuntu's Print, <Alt>Print, and <Shift>Print # especially <Alt>Print for active windows, which flameshot is missing \"Flameshot - Capture current screen to file\" \"flameshot screen --path ${ flamehost_output_path } \" \"<Control><Shift>Print\" #\"Flameshot - Capture all screens to file\" # \"flameshot full --path ${flamehost_output_path}\" # \"<Control><Super><Shift>Print\" #\"Flameshot - Capture region without GUI to file and clipboard\" # \"flameshot gui --accept-on-select --clipboard --path ${flamehost_output_path}\" # \"<Control>Print\" \"Flameshot - Capture region with GUI to file and clipboard\" \"flameshot gui --clipboard --path ${ flamehost_output_path } \" \"<Control>Print\" ) # Function to create a custom keyboard shortcut base_module = \"org.gnome.settings-daemon.plugins.media-keys\" module = \" ${ base_module } .custom-keybinding\" create_custom_shortcut () { local index = \" $1 \" local name = \" $2 \" local command = \" $3 \" local binding = \" $4 \" loc = \"/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom ${ index } /\" # Add the custom shortcut to the list existing_bindings = $( gsettings get ${ base_module } custom-keybindings ) if [[ \" ${ existing_bindings } \" == \"@as []\" ]] ; then new_bindings = \"[' ${ loc } ']\" else new_bindings = \" ${ existing_bindings : :- 1 } , ' ${ loc } ']\" fi gsettings set ${ base_module } custom-keybindings \" ${ new_bindings } \" # Define the custom shortcut details gsettings set \" ${ module } : ${ loc } \" name \" ${ name } \" gsettings set \" ${ module } : ${ loc } \" command \" ${ command } \" gsettings set \" ${ module } : ${ loc } \" binding \" ${ binding } \" } # Loop through the shortcuts array index = 1 while [ $index -lt ${# shortcuts [@] } ] ; do shortcut_name = \" ${ shortcuts [ $index ] } \" shortcut_command = \" ${ shortcuts [ $(( index + 1 )) ] } \" shortcut_binding = \" ${ shortcuts [ $(( index + 2 )) ] } \" create_custom_shortcut \\ $(( index / 3 )) \\ \" ${ shortcut_name } \" \\ \" ${ shortcut_command } \" \\ \" ${ shortcut_binding } \" index = $(( index + 3 )) done","title":"Shortcuts"},{"location":"ssh/","text":"SSH \u00b6 Emails config file \u00b6 Create a ${HOME}/ssh-emails.txt file with your personal and/or work emails. Rules: each line in the file will be used by the script to create one SSH key the machine (node) name and the email will be used in the key file name line format is email no spaces allowed before or after the email Info You should have an SSH key for each email, so that when you have a security change you only lose access to the resources tied to one email. Warning If you use the example below for creating the file you must change your name for each email. tee \" ${ HOME } /ssh-emails.txt\" >/dev/null <<EOF john.smith@gmail.com john.smith@work.com EOF Hosts config file \u00b6 Create a ${HOME}/ssh-hosts.txt file with your personal and/or work SSH hosts and user details. Rules: each line in the file will be used by the script to create one SSH key the machine (node) name and the email will be used in the key file name line format is user_name,host_alias,host_name,id_email no spaces allowed before or after the comma delimiters Info You need an entry for each host you intend to access. For git hosts, leave the host alias identical to the host name if you are using a single key for the platform, such as github.com. Specify an alias under Host and the address under HostName if there is more than one account for a platform such as github.com. You will need to use git clone git@host_alias:user_name/repo_name.git instead of git clone git@github.com:user_name/repo_name.git . For hosts intended for terminal access, you should use an alias to connect without having to remember IP adresses. Warning If you use the example below for creating the file you must change your name for each email. The user name and IP address below are also just an example, if you don\u2019t plan to connect to any severs via terminal simply remove the line. tee \" ${ HOME } /ssh-hosts.txt\" >/dev/null <<EOF git,github.com,github.com,john.smith@gmail.com git,gitlab.com,gitlab.com,john.smith@gmail.com jsmith,10.11.12.13,john.smith@work.com EOF SSH key(s) and config file creation, key forwarding, keychain setup \u00b6 IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'SSH_ID_EMAILS=($(<${HOME}/ssh-emails.txt))' NODE_NAME = $( uname -n ) # create key(s) # enter and re-enter the password for each key for ssh_id_email in \" ${ SSH_ID_EMAILS [@] } \" ; do echo \"Key for ${ ssh_id_email } __ ${ NODE_NAME } :\" ssh-keygen \\ -t rsa -b 4096 \\ -C \" ${ ssh_id_email } __ ${ NODE_NAME } \" \\ -f \" ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa\" done # Troubleshooting # if files have the wrong permissions: #sudo chmod 600 \"${HOME}/.ssh/${ssh_id_email}__${NODE_NAME}_rsa\" #sudo chmod 644 \"${HOME}/.ssh/${ssh_id_email}__${NODE_NAME}_rsa.pub\" # to change comment: #ssh-keygen -f ~/.ssh/keyfilename -o -c -C \"new comment\" # Command options explained: # -f: private key file # -o: convert the private key from PEM to the new OpenSSH format # -c: change the comment in the private and public key files # -C: comment text IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'SSH_HOSTS_TO_ID_EMAILS_MAP=($(<${HOME}/ssh-hosts.txt))' function get_ssh_config_hosts () { for kvp in \" ${ SSH_HOSTS_TO_ID_EMAILS_MAP [@] } \" ; do user_name = $( echo ${ kvp } | cut -d ',' -f 1 ) host_alias = $( echo ${ kvp } | cut -d ',' -f 2 ) host_name = $( echo ${ kvp } | cut -d ',' -f 3 ) ssh_id_email = $( echo ${ kvp } | cut -d ',' -f 4 ) echo \"Host ${ host_alias } \" echo \" HostName ${ host_name } \" echo \" IdentityFile ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa\" echo \" User ${ user_name } \\n\" done } # config for automatic mapping of hosts with identities mkdir -p \" ${ HOME } /.ssh\" tee -a \" ${ HOME } /.ssh/config\" >/dev/null <<EOF $(get_ssh_config_hosts) # keep this at the end Host * # add keys automatically to ssh-agent, ignore for old versions of ssh IgnoreUnknown AddKeysToAgent AddKeysToAgent yes # required for MacOS keychain, not relevant to Ubuntu but good to know #IgnoreUnknown UseKeychain #UseKeychain yes # define the order in which to try auth methods PreferredAuthentications publickey,keyboard-interactive,password,hostbased,gssapi-with-mic # enable to prevent the use of keys for undefined servers IdentitiesOnly yes # enable for large uncompressed data transfers only #Compression yes # send a null packet to the other side every 300 seconds # and abort if there's no response after 3 tries ServerAliveInterval 300 ServerAliveCountMax 3 EOF # this function ignores git hosts, it is meant for terminal connections to servers function forward_ssh_ids () { for kvp in \" ${ SSH_HOSTS_TO_ID_EMAILS_MAP [@] } \" ; do user_name = $( echo ${ kvp } | cut -d ',' -f 1 ) if [ \" ${ user_name } \" ! = \"git\" ] ; then host = $( echo ${ kvp } | cut -d ',' -f 2 ) ssh_id_email = $( echo ${ kvp } | cut -d ',' -f 3 ) ssh-copy-id -f \\ -i \" ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa.pub\" \\ \" ${ user_name } @ ${ host } \" fi done } # Put your public key e.g. ~/.ssh/id_rsa.pub in the remote computer's # authorized_keys file, creating the .ssh directory and authorized_keys file # with the right permissions if necessary. forward_ssh_ids # Add the ssh keys to the agent ssh-add \" ${ HOME } /.ssh/\" * ${ NODE_NAME } _rsa # Write keychain loading script to login shell run commands file tee -a \" ${ HOME } /.zprofile\" >/dev/null <<EOF # load keychain eval \\$(keychain --nogui --quick --quiet --lockwait 0 --agents ssh --eval --confhost) [ -z \"\\{$HOSTNAME}\" ] && HOSTNAME=\\$(uname -n) [ -f \"\\${HOME}/.keychain/\\${HOSTNAME}-sh\" ] && source \"\\${HOME}/.keychain/\\${HOSTNAME}-sh\" EOF","title":"SSH"},{"location":"ssh/#ssh","text":"","title":"SSH"},{"location":"ssh/#emails-config-file","text":"Create a ${HOME}/ssh-emails.txt file with your personal and/or work emails. Rules: each line in the file will be used by the script to create one SSH key the machine (node) name and the email will be used in the key file name line format is email no spaces allowed before or after the email Info You should have an SSH key for each email, so that when you have a security change you only lose access to the resources tied to one email. Warning If you use the example below for creating the file you must change your name for each email. tee \" ${ HOME } /ssh-emails.txt\" >/dev/null <<EOF john.smith@gmail.com john.smith@work.com EOF","title":"Emails config file"},{"location":"ssh/#hosts-config-file","text":"Create a ${HOME}/ssh-hosts.txt file with your personal and/or work SSH hosts and user details. Rules: each line in the file will be used by the script to create one SSH key the machine (node) name and the email will be used in the key file name line format is user_name,host_alias,host_name,id_email no spaces allowed before or after the comma delimiters Info You need an entry for each host you intend to access. For git hosts, leave the host alias identical to the host name if you are using a single key for the platform, such as github.com. Specify an alias under Host and the address under HostName if there is more than one account for a platform such as github.com. You will need to use git clone git@host_alias:user_name/repo_name.git instead of git clone git@github.com:user_name/repo_name.git . For hosts intended for terminal access, you should use an alias to connect without having to remember IP adresses. Warning If you use the example below for creating the file you must change your name for each email. The user name and IP address below are also just an example, if you don\u2019t plan to connect to any severs via terminal simply remove the line. tee \" ${ HOME } /ssh-hosts.txt\" >/dev/null <<EOF git,github.com,github.com,john.smith@gmail.com git,gitlab.com,gitlab.com,john.smith@gmail.com jsmith,10.11.12.13,john.smith@work.com EOF","title":"Hosts config file"},{"location":"ssh/#ssh-keys-and-config-file-creation-key-forwarding-keychain-setup","text":"IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'SSH_ID_EMAILS=($(<${HOME}/ssh-emails.txt))' NODE_NAME = $( uname -n ) # create key(s) # enter and re-enter the password for each key for ssh_id_email in \" ${ SSH_ID_EMAILS [@] } \" ; do echo \"Key for ${ ssh_id_email } __ ${ NODE_NAME } :\" ssh-keygen \\ -t rsa -b 4096 \\ -C \" ${ ssh_id_email } __ ${ NODE_NAME } \" \\ -f \" ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa\" done # Troubleshooting # if files have the wrong permissions: #sudo chmod 600 \"${HOME}/.ssh/${ssh_id_email}__${NODE_NAME}_rsa\" #sudo chmod 644 \"${HOME}/.ssh/${ssh_id_email}__${NODE_NAME}_rsa.pub\" # to change comment: #ssh-keygen -f ~/.ssh/keyfilename -o -c -C \"new comment\" # Command options explained: # -f: private key file # -o: convert the private key from PEM to the new OpenSSH format # -c: change the comment in the private and public key files # -C: comment text IFS = $'\\r\\n' GLOBIGNORE = '*' eval 'SSH_HOSTS_TO_ID_EMAILS_MAP=($(<${HOME}/ssh-hosts.txt))' function get_ssh_config_hosts () { for kvp in \" ${ SSH_HOSTS_TO_ID_EMAILS_MAP [@] } \" ; do user_name = $( echo ${ kvp } | cut -d ',' -f 1 ) host_alias = $( echo ${ kvp } | cut -d ',' -f 2 ) host_name = $( echo ${ kvp } | cut -d ',' -f 3 ) ssh_id_email = $( echo ${ kvp } | cut -d ',' -f 4 ) echo \"Host ${ host_alias } \" echo \" HostName ${ host_name } \" echo \" IdentityFile ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa\" echo \" User ${ user_name } \\n\" done } # config for automatic mapping of hosts with identities mkdir -p \" ${ HOME } /.ssh\" tee -a \" ${ HOME } /.ssh/config\" >/dev/null <<EOF $(get_ssh_config_hosts) # keep this at the end Host * # add keys automatically to ssh-agent, ignore for old versions of ssh IgnoreUnknown AddKeysToAgent AddKeysToAgent yes # required for MacOS keychain, not relevant to Ubuntu but good to know #IgnoreUnknown UseKeychain #UseKeychain yes # define the order in which to try auth methods PreferredAuthentications publickey,keyboard-interactive,password,hostbased,gssapi-with-mic # enable to prevent the use of keys for undefined servers IdentitiesOnly yes # enable for large uncompressed data transfers only #Compression yes # send a null packet to the other side every 300 seconds # and abort if there's no response after 3 tries ServerAliveInterval 300 ServerAliveCountMax 3 EOF # this function ignores git hosts, it is meant for terminal connections to servers function forward_ssh_ids () { for kvp in \" ${ SSH_HOSTS_TO_ID_EMAILS_MAP [@] } \" ; do user_name = $( echo ${ kvp } | cut -d ',' -f 1 ) if [ \" ${ user_name } \" ! = \"git\" ] ; then host = $( echo ${ kvp } | cut -d ',' -f 2 ) ssh_id_email = $( echo ${ kvp } | cut -d ',' -f 3 ) ssh-copy-id -f \\ -i \" ${ HOME } /.ssh/ ${ ssh_id_email } __ ${ NODE_NAME } _rsa.pub\" \\ \" ${ user_name } @ ${ host } \" fi done } # Put your public key e.g. ~/.ssh/id_rsa.pub in the remote computer's # authorized_keys file, creating the .ssh directory and authorized_keys file # with the right permissions if necessary. forward_ssh_ids # Add the ssh keys to the agent ssh-add \" ${ HOME } /.ssh/\" * ${ NODE_NAME } _rsa # Write keychain loading script to login shell run commands file tee -a \" ${ HOME } /.zprofile\" >/dev/null <<EOF # load keychain eval \\$(keychain --nogui --quick --quiet --lockwait 0 --agents ssh --eval --confhost) [ -z \"\\{$HOSTNAME}\" ] && HOSTNAME=\\$(uname -n) [ -f \"\\${HOME}/.keychain/\\${HOSTNAME}-sh\" ] && source \"\\${HOME}/.keychain/\\${HOSTNAME}-sh\" EOF","title":"SSH key(s) and config file creation, key forwarding, keychain setup"},{"location":"zsh/","text":"Shell: Zsh + Oh My Zsh + PowerLevel10k \u00b6 Todo Research: http://www.bash2zsh.com/zsh_refcard/refcard.pdf http://grml.org/zsh/zsh-lovers.html http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html Install Zsh and log out, when you login back again zsh will be your new default shell: sudo apt install -y zsh # change default shell chsh -s $( which zsh ) # log out gnome-session-quit --no-prompt Open a terminal and choose the following when being prompted for the zsh config: (1) Continue to the main menu. (1) Configure settings for history, i.e. command lines remembered and saved by the shell. (Recommended.) # (1) Number of lines of history kept within the shell. 100000 # (3) Number of lines of history to save to $HISTFILE. # (0) Remember edits and return to main menu (does not save file yet) (2) Configure the new completion system. (Recommended.) (1) Turn on completion with the default options. (4) Pick some of the more common shell options. These are simple \"on\" or \"off\" switches controlling the shell's features. # (1) Change directory given just path. (s) to set it (turn it on) # (4) Beep on errors. (s) to set it (turn it on) # (0) Remember edits and return to main menu (does not save file yet) (0) Exit, saving the new settings. They will take effect immediately. https://github.com/ohmyzsh/ohmyzsh?tab=readme-ov-file#basic-installation https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#oh-my-zsh Install Oh My Zsh, this will close the current terminal: # TODO: try using: sh -s --unattended curl -sS -L -f \"https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\" \\ | sh exit Warning At this point you should have the fonts installed as per the guide . Open a new terminal and set up the theme, this will close the current terminal: git clone --depth = 1 \\ \"https://github.com/romkatv/powerlevel10k.git\" \\ ${ ZSH_CUSTOM :- $HOME /.oh-my-zsh/custom } /themes/powerlevel10k sed -i \\ 's:ZSH_THEME=\"robbyrussell\":ZSH_THEME=\"powerlevel10k/powerlevel10k\":' \\ \" ${ HOME } /.zshrc\" exit Open a terminal and choose the following when being prompted for the powerlevel10k config: Does this look like a diamond (rotated square)? (y) Yes. Does this look like a lock? (y) Yes. Does this look like an upwards arrow? (n) No. Does this look like an upwards arrow? (y) Yes. What digit is the downwards arrow pointing at? (1) It is pointing at '1'. Do all these icons fit between the crosses? (n) No. Some icons overlap neighbouring crosses. Prompt Style (1) Lean. Character Set (1) Unicode. Prompt Colors (1) 256 colors. Show current time? (2) 24-hour format. Prompt Height (2) Two lines. Prompt Connection (1) Disconnected. Prompt Frame (1) No frame. Prompt Spacing (1) Compact. Icons (2) Many icons. Prompt Flow (1) Concise. Enable Transient Prompt? (y) Yes. Instant Prompt Mode (1) Verbose (recommended). Apply changes to ~/.zshrc? (y) Yes (recommended). If you decide to skip this, you can configure the Oh My Zsh theme using: p10k configure Todo Fix basic zsh settings not being saved, e.g. HISTSIZE Set up the plugins: # disable P10k pyenv prompt token, it becomes duplicate of virtualenv (bug?) sed -i \\ \"s/ pyenv/ # pyenv/\" \\ \" ${ HOME } /.p10k.zsh\" # set plugins, the more the slower the prompt ZSH_PLUGINS = $( cat <<EOF plugins=( \\n\\ command-not-found \\n\\ dirhistory \\n\\ docker \\n\\ docker-compose \\n\\ encode64 \\n\\ git \\n\\ helm \\n\\ history \\n\\ jsontools \\n\\ kubectl \\n\\ poetry \\n\\ rsync \\n\\ #thefuck \\n\\ urltools \\n\\ web-search \\n\\ ) EOF ) sed -i \\ \"s/plugins=(git)/ ${ ZSH_PLUGINS } /\" \\ \" ${ HOME } /.zshrc\" Todo Research other useful plugins Maybe: pip pyenv pylint python redis-Compilation sudo tmux tmuxinator vscode Desired: catimg https://github.com/posva/catimg requires convert from imagemagick, package is very large use C version from original repo https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/catimg git-extras https://github.com/tj/git-extras https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-extras compatibility issue https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md Install direnv : tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Add hooks for direnv to allow auto processing for .envrc files export DIRENV_LOG_FORMAT=\"\" eval \"\\$(direnv hook zsh)\" EOF Key bindings, aliases, completions, path: # add user binaries directory to PATH # https://unix.stackexchange.com/questions/36871/where-should-a-local-executable-be-placed mkdir -p \" ${ HOME } /bin\" \" ${ HOME } /.local/bin\" sed -i \\ 's%# \\(export PATH=$HOME.*\\)%\\1%' \\ \" ${ HOME } /.zshrc\" # key bindings for navigating the command line # home bindkey \"^[[H\" beginning-of-line # end bindkey \"^[[F\" end-of-line # ctrl + right arrow bindkey \"^[[1;5C\" forward-word # ctrl + left arrow bindkey \"^[[1;5D\" backward-word # ctrl + backspace bindkey \"^H\" backward-delete-word # ctrl + delete bindkey \"^[[3;5~\" delete-word # esc ' bindkey \"^[;\" quote-line # ctrl + alt + ' (at the end of the region) bindkey \"^[\\x27\" quote-region # ctrl + o bindkey \"^O\" up-case-word # ctrl + l bindkey \"^L\" down-case-word EOF # Terminal copy-paste with xclip tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # used to pipe into the clipboard, e.g. ps -e | xcc alias xcc=\"xclip -rmlastnl -selection clipboard -filter | xclip -rmlastnl -selection primary\" # used to copy the current line, e.g. xc \"abcd efgh\" function xc() { echo -n \"\\$*\" | xcc ; } # used to paste into stdout alias xv=\"xclip -o\" EOF # Aliases not covered by oh my zsh plugins tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Common command aliases # redirect following and silent except for errors alias curl='curl -sS -L' # sort keys in JSON output alias jq='jq -S' alias pyjsonlint='python -m json.tool' alias pyjsonlint-no-stdout='pyjsonlint >/dev/null' EOF # init completions tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF autoload -Uz compinit && compinit EOF source \" ${ HOME } /.zshrc\" Todo Investigate https://github.com/zsh-users/zsh-completions git clone https://github.com/zsh-users/zsh-completions ${ ZSH_CUSTOM :=~/.oh-my-zsh/custom } /plugins/zsh-completions plugins=(\u2026 zsh-completions) must be placed before compinit Todo install colorls https://github.com/athityakumar/colorls https://linuxize.com/post/how-to-install-ruby-on-ubuntu-18-04/ Todo # The following lines were added by compinstall zstyle ':completion:*' completer _complete _ignored zstyle :compinstall filename '/home/tdumitrescu/.zshrc' autoload -Uz compinit compinit # End of lines added by compinstall # Lines configured by zsh-newuser-install HISTFILE = ~/.histfile HISTSIZE = 100000 SAVEHIST = 100000 setopt autocd beep nomatch notify bindkey -e # End of lines configured by zsh-newuser-install","title":"Shell: Zsh + Oh My Zsh + PowerLevel10k"},{"location":"zsh/#shell-zsh--oh-my-zsh--powerlevel10k","text":"Todo Research: http://www.bash2zsh.com/zsh_refcard/refcard.pdf http://grml.org/zsh/zsh-lovers.html http://zsh.sourceforge.net/Doc/Release/Shell-Builtin-Commands.html Install Zsh and log out, when you login back again zsh will be your new default shell: sudo apt install -y zsh # change default shell chsh -s $( which zsh ) # log out gnome-session-quit --no-prompt Open a terminal and choose the following when being prompted for the zsh config: (1) Continue to the main menu. (1) Configure settings for history, i.e. command lines remembered and saved by the shell. (Recommended.) # (1) Number of lines of history kept within the shell. 100000 # (3) Number of lines of history to save to $HISTFILE. # (0) Remember edits and return to main menu (does not save file yet) (2) Configure the new completion system. (Recommended.) (1) Turn on completion with the default options. (4) Pick some of the more common shell options. These are simple \"on\" or \"off\" switches controlling the shell's features. # (1) Change directory given just path. (s) to set it (turn it on) # (4) Beep on errors. (s) to set it (turn it on) # (0) Remember edits and return to main menu (does not save file yet) (0) Exit, saving the new settings. They will take effect immediately. https://github.com/ohmyzsh/ohmyzsh?tab=readme-ov-file#basic-installation https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#oh-my-zsh Install Oh My Zsh, this will close the current terminal: # TODO: try using: sh -s --unattended curl -sS -L -f \"https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\" \\ | sh exit Warning At this point you should have the fonts installed as per the guide . Open a new terminal and set up the theme, this will close the current terminal: git clone --depth = 1 \\ \"https://github.com/romkatv/powerlevel10k.git\" \\ ${ ZSH_CUSTOM :- $HOME /.oh-my-zsh/custom } /themes/powerlevel10k sed -i \\ 's:ZSH_THEME=\"robbyrussell\":ZSH_THEME=\"powerlevel10k/powerlevel10k\":' \\ \" ${ HOME } /.zshrc\" exit Open a terminal and choose the following when being prompted for the powerlevel10k config: Does this look like a diamond (rotated square)? (y) Yes. Does this look like a lock? (y) Yes. Does this look like an upwards arrow? (n) No. Does this look like an upwards arrow? (y) Yes. What digit is the downwards arrow pointing at? (1) It is pointing at '1'. Do all these icons fit between the crosses? (n) No. Some icons overlap neighbouring crosses. Prompt Style (1) Lean. Character Set (1) Unicode. Prompt Colors (1) 256 colors. Show current time? (2) 24-hour format. Prompt Height (2) Two lines. Prompt Connection (1) Disconnected. Prompt Frame (1) No frame. Prompt Spacing (1) Compact. Icons (2) Many icons. Prompt Flow (1) Concise. Enable Transient Prompt? (y) Yes. Instant Prompt Mode (1) Verbose (recommended). Apply changes to ~/.zshrc? (y) Yes (recommended). If you decide to skip this, you can configure the Oh My Zsh theme using: p10k configure Todo Fix basic zsh settings not being saved, e.g. HISTSIZE Set up the plugins: # disable P10k pyenv prompt token, it becomes duplicate of virtualenv (bug?) sed -i \\ \"s/ pyenv/ # pyenv/\" \\ \" ${ HOME } /.p10k.zsh\" # set plugins, the more the slower the prompt ZSH_PLUGINS = $( cat <<EOF plugins=( \\n\\ command-not-found \\n\\ dirhistory \\n\\ docker \\n\\ docker-compose \\n\\ encode64 \\n\\ git \\n\\ helm \\n\\ history \\n\\ jsontools \\n\\ kubectl \\n\\ poetry \\n\\ rsync \\n\\ #thefuck \\n\\ urltools \\n\\ web-search \\n\\ ) EOF ) sed -i \\ \"s/plugins=(git)/ ${ ZSH_PLUGINS } /\" \\ \" ${ HOME } /.zshrc\" Todo Research other useful plugins Maybe: pip pyenv pylint python redis-Compilation sudo tmux tmuxinator vscode Desired: catimg https://github.com/posva/catimg requires convert from imagemagick, package is very large use C version from original repo https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/catimg git-extras https://github.com/tj/git-extras https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/git-extras compatibility issue https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md Install direnv : tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Add hooks for direnv to allow auto processing for .envrc files export DIRENV_LOG_FORMAT=\"\" eval \"\\$(direnv hook zsh)\" EOF Key bindings, aliases, completions, path: # add user binaries directory to PATH # https://unix.stackexchange.com/questions/36871/where-should-a-local-executable-be-placed mkdir -p \" ${ HOME } /bin\" \" ${ HOME } /.local/bin\" sed -i \\ 's%# \\(export PATH=$HOME.*\\)%\\1%' \\ \" ${ HOME } /.zshrc\" # key bindings for navigating the command line # home bindkey \"^[[H\" beginning-of-line # end bindkey \"^[[F\" end-of-line # ctrl + right arrow bindkey \"^[[1;5C\" forward-word # ctrl + left arrow bindkey \"^[[1;5D\" backward-word # ctrl + backspace bindkey \"^H\" backward-delete-word # ctrl + delete bindkey \"^[[3;5~\" delete-word # esc ' bindkey \"^[;\" quote-line # ctrl + alt + ' (at the end of the region) bindkey \"^[\\x27\" quote-region # ctrl + o bindkey \"^O\" up-case-word # ctrl + l bindkey \"^L\" down-case-word EOF # Terminal copy-paste with xclip tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # used to pipe into the clipboard, e.g. ps -e | xcc alias xcc=\"xclip -rmlastnl -selection clipboard -filter | xclip -rmlastnl -selection primary\" # used to copy the current line, e.g. xc \"abcd efgh\" function xc() { echo -n \"\\$*\" | xcc ; } # used to paste into stdout alias xv=\"xclip -o\" EOF # Aliases not covered by oh my zsh plugins tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF # Common command aliases # redirect following and silent except for errors alias curl='curl -sS -L' # sort keys in JSON output alias jq='jq -S' alias pyjsonlint='python -m json.tool' alias pyjsonlint-no-stdout='pyjsonlint >/dev/null' EOF # init completions tee -a \" ${ HOME } /.zshrc\" >/dev/null <<EOF autoload -Uz compinit && compinit EOF source \" ${ HOME } /.zshrc\" Todo Investigate https://github.com/zsh-users/zsh-completions git clone https://github.com/zsh-users/zsh-completions ${ ZSH_CUSTOM :=~/.oh-my-zsh/custom } /plugins/zsh-completions plugins=(\u2026 zsh-completions) must be placed before compinit Todo install colorls https://github.com/athityakumar/colorls https://linuxize.com/post/how-to-install-ruby-on-ubuntu-18-04/ Todo # The following lines were added by compinstall zstyle ':completion:*' completer _complete _ignored zstyle :compinstall filename '/home/tdumitrescu/.zshrc' autoload -Uz compinit compinit # End of lines added by compinstall # Lines configured by zsh-newuser-install HISTFILE = ~/.histfile HISTSIZE = 100000 SAVEHIST = 100000 setopt autocd beep nomatch notify bindkey -e # End of lines configured by zsh-newuser-install","title":"Shell: Zsh + Oh My Zsh + PowerLevel10k"}]}